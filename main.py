import requests
import telebot
import tempfile
import random
import os
import io
import html
import threading
from urllib.parse import quote
from io import BytesIO
import time
import urllib.parse
from telebot import types
import logging
import atexit
from datetime import datetime, timezone, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputMediaPhoto
import urllib3
import re
from urllib.parse import urlparse
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
API_TOKEN = '7562722453:AAHCy0ZSncgmL1a5PtnENc8Sw60a3QFp9Ec'
bot = telebot.TeleBot(API_TOKEN, parse_mode='HTML')
# Khai b√°o bi·∫øn to√†n c·ª•c
ADMIN_ID = 6452283369
chat_id = -1002170831477
BASE_URL = "http://hunght1890.com/{}"
valid_keys = {}  # L∆∞u key th∆∞·ªùng
vip_keys = {}    # L∆∞u key VIP
user_video_info = {}
waiting_users = {}  # <--- Th√™m d√≤ng n√†y ·ªü ƒë√¢y
auto_buff_by_username = {}  # <--- T·ª± ƒë·ªông buff theo t·ª´ng username
WEATHER_API_KEY = '9185cfa59b9c2c2db6678b9dfc225065'
GOOGLE_MAPS_URL = "https://www.google.com/maps/search/?api=1&query="
logger = logging.getLogger(__name__)
QRND_API_URL = "https://qr.sepay.vn/img"
def get_vietnam_time():
    utc_now = datetime.now(timezone.utc)
    vietnam_now = utc_now + timedelta(hours=7)
    return vietnam_now.strftime("%d/%m/%Y %H:%M:%S")

# H√†m ki·ªÉm tra quy·ªÅn truy c·∫≠p nh√≥m
def is_allowed_group(chat_id):
    # Thay ƒë·ªïi ID nh√≥m ho·∫∑c username nh√≥m cho ph√π h·ª£p
    allowed_groups = [-1002170831477, '@nhomspamcallsms']
    return chat_id in allowed_groups

def safe_text(value, default="Kh√¥ng c√≥ d·ªØ li·ªáu"):
    return html.escape(str(value)) if value else default

def safe_number(value, default="0"):
    return f"{int(value):,}" if str(value).isdigit() else default

def get_flag(region):
    flags = {
        "VN": "üáªüá≥",
        "Thailand": "üáπüá≠",
        "SG": "üáÆüá©",
        "IND": "üáÆüá≥",
        "Brazil": "üáßüá∑",
        "Mexico": "üá≤üáΩ",
        "United States": "üá∫üá∏",
        "Russia": "üá∑üá∫",
        "Europe": "üá™üá∫",
        "Others": "üè≥"
    }
    return flags.get(region, "üè≥")  # M·∫∑c ƒë·ªãnh l√† c·ªù tr·∫Øng n·∫øu kh√¥ng t√¨m th·∫•y
#===================================#
@bot.message_handler(commands=['proxy'])
def send_proxy_directly(message):
    chat_id = message.chat.id

    # Xo√° l·ªánh ng∆∞·ªùi d√πng
    try:
        bot.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"L·ªói khi xo√° l·ªánh: {e}")

    # L·∫•y v·ªã tr√≠ v√† th·ªùi gian
    city, region, country, lat, lon = get_location_by_ip()
    now = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")

    # Caption g·ª≠i k√®m
    caption = (
        f"üìï Danh s√°ch proxy\n\n"
        f"üåç V·ªã tr√≠ IP hi·ªán t·∫°i\n"
        f"üóæ Th√†nh ph·ªë: {city}\n"
        f"üèïÔ∏è V√πng: {region}\n"
        f"üåê Qu·ªëc gia: {country}\n"
        f"üó∫Ô∏è To·∫° ƒë·ªô: {lat}, {lon}\n"
        f"‚è∞ B√¢y gi·ªù l√†: {now}"
    )

    # T·∫£i v√† g·ª≠i file proxy
    filename = download_proxies()
    with open(filename, "rb") as f:
        bot.send_document(chat_id, f, caption=caption)

# T·∫£i proxy
def download_proxies():
    filename = "proxy.txt"
    urls = [
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=1000000&country=CN&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=10000000&country=VN&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=10099999900&country=UK&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=US&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=BR&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=ID&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=JP&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=NL&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=FI&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=ES&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=PL&ssl=all&anonymity=all',
        'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=929929199&country=BD&ssl=all&anonymity=all'
    ]
    with open(filename, "w") as f:
        for url in urls:
            try:
                r = requests.get(url)
                f.write(r.text)
            except:
                pass
    return filename

# L·∫•y v·ªã tr√≠ IP
def get_location_by_ip():
    try:
        data = requests.get("https://ipinfo.io").json()
        city = data.get("city", "Kh√¥ng r√µ")
        region = data.get("region", "")
        country = data.get("country", "")
        loc = data.get("loc", "0,0").split(",")
        return city, region, country, loc[0], loc[1]
    except:
        return "Kh√¥ng r√µ", "", "", "0", "0"
#===================================#
@bot.message_handler(commands=['spotify'])
def handle_spotify_command(message):
    parts = message.text.split(maxsplit=1)

    if len(parts) < 2:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\nV√≠ d·ª•: /spotify https://open.spotify.com/track/0xlWd9o8yjKpJ02WJy79kZ")
        return

    url = parts[1].strip()

    if 'spotify.com/playlist/' in url:
        bot.reply_to(message, "‚ö†Ô∏è Hi·ªán t·∫°i bot ch∆∞a h·ªó tr·ª£ t·∫£i playlist Spotify.")
        return
    elif 'spotify.com/album/' in url:
        bot.reply_to(message, "‚ö†Ô∏è Hi·ªán t·∫°i bot ch∆∞a h·ªó tr·ª£ t·∫£i album Spotify.")
        return
    elif 'spotify.com/track/' not in url:
        bot.reply_to(message, "‚ùå ƒê√¢y kh√¥ng ph·∫£i link b√†i h√°t Spotify h·ª£p l·ªá.")
        return

    api_url = f"https://spotify-downloader.ma-coder-x.workers.dev/?url={url}"

    try:
        response = requests.get(api_url)
        data = response.json()

        if data.get("status"):
            result = data["result"]
            duration_min = round(result["duration_ms"] / 60000, 2)
            title = result["title"]
            artist = result["artist"]
            image_url = result["image"]
            download_url = result["download"]

            caption = (
                f"<b>{title}</b>\n"
                f"üë§ <i>Ngh·ªá sƒ©:</i> {artist}\n"
                f"‚è±Ô∏è <i>Th·ªùi l∆∞·ª£ng:</i> {duration_min} ph√∫t\n"
                f"‚¨áÔ∏è <a href=\"{download_url}\">T·∫£i MP3</a>\n\n"
            )

            bot.send_photo(
                chat_id=message.chat.id,
                photo=image_url,
                caption=caption,
                parse_mode='HTML'
            )

            # X√≥a tin nh·∫Øn l·ªánh g·ªëc c·ªßa ng∆∞·ªùi d√πng
            try:
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception as del_err:
                print(f"L·ªói khi x√≥a tin nh·∫Øn: {del_err}")

        else:
            bot.reply_to(message, "Kh√¥ng th·ªÉ x·ª≠ l√Ω link Spotify n√†y.")
    except Exception as e:
        bot.reply_to(message, f"L·ªói x·∫£y ra: {str(e)}")

@bot.message_handler(commands=['search'])
def search_music(message):
    query = message.text[len('/search '):].strip()
    if not query:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p t√™n b√†i h√°t. V√≠ d·ª•:\n/search Atif Aslam")
        return

    # G·ªçi API t√¨m ki·∫øm b√†i h√°t
    url = f'https://spotify-search.ma-coder-x.workers.dev/?q={requests.utils.quote(query)}'
    try:
        res = requests.get(url).json()
        if res.get('status') and res.get('result'):
            for item in res['result'][:5]:  # 5 b√†i ƒë·∫ßu
                title = item.get('title')
                artists = item.get('artists')
                duration = item.get('duration_ms') // 1000
                link = item.get('link')
                image = item.get('image')
                mp3_link = item.get('download')  # ƒê√¢y l√† link t·∫£i MP3

                minutes = duration // 60
                seconds = duration % 60
                caption = (
                    f"<b>{title}</b>\n"
                    f"<i>Ca sƒ©:</i> {artists}\n"
                    f"<i>Th·ªùi l∆∞·ª£ng:</i> {minutes}:{seconds:02d}\n\n"
                    f"<a href='{link}'>M·ªü tr√™n Spotify</a>"
                )

                # G·ª≠i ·∫£nh v√† th√¥ng tin b√†i h√°t
                bot.send_photo(message.chat.id, image, caption=caption, parse_mode="HTML")

                # G·ª≠i t·ªáp √¢m thanh MP3 cho ng∆∞·ªùi d√πng
                if mp3_link:
                    bot.send_audio(message.chat.id, mp3_link)
        else:
            bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.")
    except Exception as e:
        bot.reply_to(message, f"L·ªói khi t√¨m ki·∫øm: {str(e)}")

    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

@bot.message_handler(commands=['roblox'])
def roblox_info(message):
    args = message.text.strip().split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùó Vui l√≤ng nh·∫≠p username. V√≠ d·ª•: /roblox PixelFXStaker")
        return

    username = args[1]
    url = f"https://offvn.x10.mx/php/roblox.php?username={username}"

    try:
        r = requests.get(url, timeout=10)
        data = r.json()
    except Exception as e:
        bot.reply_to(message, f"üö´ Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API.\nL·ªói: {e}")
        return

    if data.get("status") != "success" or not data.get("data"):
        bot.reply_to(message, "‚ùó Kh√¥ng t√¨m th·∫•y th√¥ng tin cho username n√†y.")
        return

    d = data["data"]
    info = d.get("basicInfo") if isinstance(d.get("basicInfo"), dict) else {}
    presence = d.get("presence") if isinstance(d.get("presence"), dict) else {}

    name = info.get("name", "Kh√¥ng r√µ")
    display_name = info.get("displayName", "Kh√¥ng r√µ")
    user_id = info.get("id", "Kh√¥ng r√µ")
    account_creation_date = d.get("accountCreationDate")
    created = account_creation_date[:10] if account_creation_date else "Kh√¥ng r√µ"
    is_banned = "‚úÖ Kh√¥ng" if not info.get("isBanned", False) else "‚ùå C√≥"
    is_premium = "üíé C√≥" if d.get("isPremium", False) else "üö´ Kh√¥ng"
    friend_count = d.get("friendCount", 0)
    followers_count = d.get("followersCount", 0)
    last_location = presence.get("lastLocation", "Kh√¥ng r√µ")
    description = info.get("description", "Kh√¥ng c√≥ m√¥ t·∫£.")
    avatar_url = d.get("avatar", "")

    msg = (
        f"üéÆ <b>Th√¥ng tin Roblox</b> üéÆ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üë§ <b>Username:</b> <code>{name}</code>\n"
        f"ü™ß <b>Display Name:</b> <code>{display_name}</code>\n"
        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
        f"üìÜ <b>Ng√†y t·∫°o:</b> <code>{created}</code>\n"
        f"üîí <b>Banned:</b> {is_banned}\n"
        f"üí† <b>Premium:</b> {is_premium}\n"
        f"üë• <b>B·∫°n b√®:</b> <b>{friend_count}</b>\n"
        f"üë£ <b>Theo d√µi:</b> <b>{followers_count}</b>\n"
        f"üåê <b>Ho·∫°t ƒë·ªông g·∫ßn nh·∫•t:</b> <code>{last_location}</code>\n"
        f"üìù <b>M√¥ t·∫£:</b> <i>{description if description else 'Kh√¥ng c√≥ m√¥ t·∫£.'}</i>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )

    # G·ª≠i th√¥ng tin Roblox
    if avatar_url:
        bot.send_photo(message.chat.id, avatar_url, caption=msg, parse_mode="HTML")
    else:
        bot.reply_to(message, msg, parse_mode="HTML")

    # X√≥a tin nh·∫Øn l·ªánh c·ªßa ng∆∞·ªùi d√πng
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        # M·ªôt s·ªë tr∆∞·ªùng h·ª£p bot kh√¥ng c√≥ quy·ªÅn x√≥a (v√≠ d·ª•: kh√¥ng ph·∫£i admin group), c√≥ th·ªÉ b·ªè qua l·ªói n√†y.
        print(f"Kh√¥ng th·ªÉ x√≥a l·ªánh: {e}")

#===================================#
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB

def is_valid_url(url):
    try:
        parsed = urlparse(url)
        return parsed.scheme in ('http', 'https') and parsed.netloc != ""
    except:
        return False

@bot.message_handler(commands=['code'])
def handle_code_command(message):
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        bot.reply_to(message, "‚ùó *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:*\nG√µ `/code https://yourwebsite.com` ƒë·ªÉ l·∫•y m√£ ngu·ªìn HTML.", parse_mode="Markdown")
        return

    url = command_args[1].strip()
    if not is_valid_url(url):
        bot.reply_to(message, "‚õî *URL kh√¥ng h·ª£p l·ªá!* H√£y nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: `https://yourwebsite.com`", parse_mode="Markdown")
        return

    domain = urlparse(url).netloc.replace(":", "_")
    file_name = f"{domain}.html"

    try:
        bot.send_chat_action(message.chat.id, 'upload_document')
        response = requests.get(url, timeout=15, headers={"User-Agent": "Mozilla/5.0"})
        response.raise_for_status()

        content = response.text
        if len(content.encode('utf-8')) > MAX_FILE_SIZE:
            bot.reply_to(message, "‚ö†Ô∏è Trang web n√†y qu√° l·ªõn (tr√™n 5MB), kh√¥ng th·ªÉ g·ª≠i file m√£ ngu·ªìn!")
            return

        with open(file_name, 'w', encoding='utf-8') as file:
            file.write(content)

        with open(file_name, 'rb') as file:
            bot.send_document(
                message.chat.id,
                file,
                caption=f"‚úÖ *M√£ ngu·ªìn HTML c·ªßa*: `{url}`",
                parse_mode="Markdown"
            )
        # X√≥a l·ªánh c·ªßa ng∆∞·ªùi d√πng sau khi ho√†n th√†nh
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass  # B·ªè qua l·ªói n·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c

        # G·ª≠i tin nh·∫Øn m·ªõi (kh√¥ng reply v√†o tin nh·∫Øn ƒë√£ b·ªã x√≥a)
        bot.send_message(message.chat.id, "üéâ ƒê√£ g·ª≠i file m√£ ngu·ªìn HTML cho b·∫°n!")

    except requests.RequestException as e:
        bot.send_message(message.chat.id, f"‚ùå *L·ªói khi t·∫£i trang web:*\n`{e}`", parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå *L·ªói h·ªá th·ªëng:*\n`{e}`", parse_mode="Markdown")

    finally:
        if os.path.exists(file_name):
            try:
                os.remove(file_name)
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è *L·ªói khi x√≥a file t·∫°m:*\n`{e}`", parse_mode="Markdown")

#===================================#
@bot.message_handler(commands=['id', 'ID'])
def handle_id_command(message):
    args = message.text.split()
    reply = None

    # N·∫øu reply v√†o m·ªôt tin nh·∫Øn
    if message.reply_to_message:
        user = message.reply_to_message.from_user
        reply = f"""
üë§ <b>Th√¥ng tin ng∆∞·ªùi d√πng (qua reply):</b>
- ID: <code>{user.id}</code>
- T√™n: <b>{user.first_name or ''} {user.last_name or ''}</b>
- Username: @{user.username if user.username else 'Kh√¥ng c√≥'}
        """
    # N·∫øu nh·∫≠p /id @username
    elif len(args) == 2 and args[1].startswith('@'):
        try:
            username = args[1][1:]
            user = bot.get_chat(username)
            reply = f"""
üë§ <b>Th√¥ng tin ng∆∞·ªùi d√πng @{username}:</b>
- ID: <code>{user.id}</code>
- T√™n: <b>{user.first_name or ''} {user.last_name or ''}</b>
- Username: @{user.username if user.username else 'Kh√¥ng c√≥'}
            """
        except Exception as e:
            reply = "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y ho·∫∑c bot kh√¥ng ƒë·ªß quy·ªÅn."
    # N·∫øu l√† group/supergroup
    elif message.chat.type in ["group", "supergroup"]:
        reply = f"""
üë• <b>Th√¥ng tin nh√≥m:</b>
- ID nh√≥m: <code>{message.chat.id}</code>
- T√™n nh√≥m: <b>{message.chat.title}</b>
        """
    # N·∫øu l√† ri√™ng t∆∞
    elif message.chat.type == 'private':
        user = message.from_user
        reply = f"""
üë§ <b>Th√¥ng tin c·ªßa b·∫°n:</b>
- ID: <code>{user.id}</code>
- T√™n: <b>{user.first_name or ''} {user.last_name or ''}</b>
- Username: @{user.username if user.username else 'Kh√¥ng c√≥'}
        """
    else:
        reply = "‚ùì Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ƒë·ªëi t∆∞·ª£ng c·∫ßn l·∫•y ID.\nH√£y d√πng /id, reply tin nh·∫Øn ho·∫∑c /id @username"

    # Tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng
    bot.reply_to(message, reply, parse_mode='HTML')
    
    # G·ª≠i th√¥ng tin t·ªõi admin (n·∫øu l·∫•y ƒë∆∞·ª£c id user, group)
    try:
        bot.send_message(ADMIN_ID, f"üîî <b>C√≥ ng∆∞·ªùi v·ª´a d√πng l·ªánh /id:</b>\n\n{reply}", parse_mode='HTML')
    except Exception as e:
        print(f"L·ªói khi g·ª≠i th√¥ng tin t·ªõi admin: {e}")

    # X√ìA L·ªÜNH SAU KHI ƒê√É TR·∫¢ L·ªúI
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"L·ªói khi x√≥a l·ªánh: {e}")

#===================================#
API_TT = "https://gaitiktok.onrender.com/random?apikey=randomtnt"
session = requests.Session()

def get_flag(region):
    if not region: return "üåç"
    return "".join(chr(127397 + ord(c)) for c in region.upper())

def download_video(url, path='tkvd.mp4', timeout=15, max_retries=3):
    headers = {"User-Agent": "Mozilla/5.0"}
    for attempt in range(max_retries):
        try:
            with session.get(url, stream=True, timeout=timeout, headers=headers) as response:
                if response.status_code == 200:
                    with open(path, 'wb') as f:
                        for chunk in response.iter_content(4096):
                            f.write(chunk)
                    return path
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i video (l·∫ßn {attempt+1}): {e}")
    return None

def cleanup(file, delay=60):
    def do_remove():
        try: os.remove(file)
        except: pass
    threading.Timer(delay, do_remove).start()

def format_filesize(size_bytes):
    # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if not size_bytes or size_bytes == 0:
        return ""
    size_name = ("B", "KB", "MB", "GB", "TB")
    i = 0
    while size_bytes >= 1024 and i < len(size_name)-1:
        size_bytes /= 1024.0
        i += 1
    return f"{size_bytes:.2f} {size_name[i]}"

@bot.message_handler(commands=['gaitt'])
def handle_gaitt(message):
    waiting = bot.reply_to(message, "üîé <b>ƒêang l·∫•y video TikTok...</b>", parse_mode='HTML')
    try:
        response = session.get(API_TT, timeout=10)
        if response.status_code != 200:
            raise Exception("‚ö†Ô∏è API kh√¥ng ph·∫£n h·ªìi!")
        data = response.json().get("data")
        if not data:
            raise Exception("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu!")
        video_url = data.get("play")
        if not video_url or not video_url.startswith("http"):
            raise Exception("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video h·ª£p l·ªá!")

        bot.edit_message_text("üì• <i>ƒêang t·∫£i video...</i>", message.chat.id, waiting.message_id, parse_mode='HTML')
        video_path = download_video(video_url)
        if not video_path:
            raise Exception("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i video!")

        # L·∫•y d·ªØ li·ªáu
        author = data.get('author', {})
        region = data.get('region', 'N/A')
        flag = get_flag(region)
        hashtags = " ".join(f"#{tag}" for tag in data.get("hashtags", [])) if data.get("hashtags") else ""
        tiktok_link = data.get("url", f"https://tiktok.com/@{author.get('unique_id','')}")
        duration = data.get("duration", 0)
        filesize = data.get("size", 0)  # N·∫øu API kh√¥ng c√≥ th√¨ s·∫Ω l√† 0
        create_time = data.get("create_time", 0)
        is_ad = data.get("is_ad", False)

        do_dai_video = f"‚è≥ ƒê·ªô d√†i: {duration}s\n" if duration else ""
        dung_luong = f"üíæ Dung l∆∞·ª£ng: {format_filesize(filesize)}\n" if filesize else ""
        la_ad = "üì¢ <b>Qu·∫£ng c√°o</b>\n" if is_ad else ""

        # Caption ki·ªÉu blockquote ƒë·∫πp
        caption = (
            f"üé• <strong>{data.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}</strong>\n\n"
            f"<blockquote><i>"
            f"üë§ T√°c gi·∫£: <a href='https://www.tiktok.com/@{author.get('unique_id', '')}'>{author.get('nickname', 'N/A')}</a>\n"
            f"üåç Khu V·ª±c: {region} {flag}\n"
            f"{do_dai_video}"
            f"{dung_luong}"
            f"{la_ad}"
            f"---------------------------------------\n"
            f"‚ñ∂Ô∏è Views: {data.get('play_count', 0)}\n"
            f"‚ù§Ô∏è Likes: {data.get('digg_count', 0)}\n"
            f"üí¨ Comments: {data.get('comment_count', 0)}\n"
            f"üîÑ Shares: {data.get('share_count', 0)}\n"
            f"‚¨áÔ∏è Downloads: {data.get('download_count', 0)}\n"
            f"üì• Favorites: {data.get('collect_count', 0)}"
            f"</i></blockquote>"
        )
        if hashtags:
            caption += f"\n<b>üéµ Hashtags:</b> <i>{hashtags}</i>"

        # N√∫t "Video kh√°c"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ Video kh√°c", callback_data="gaitt_new"))

        bot.delete_message(message.chat.id, waiting.message_id)
        bot.send_chat_action(message.chat.id, 'upload_video')
        with open(video_path, 'rb') as video:
            bot.send_video(
                message.chat.id, video=video, caption=caption,
                reply_to_message_id=message.message_id,
                parse_mode='HTML', supports_streaming=True, reply_markup=markup
            )
        cleanup(video_path, delay=60)

    except Exception as e:
        bot.edit_message_text(f"‚ùå <b>L·ªói:</b> {e}", message.chat.id, waiting.message_id, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == "gaitt_new")
def handle_gaitt_new(call):
    handle_gaitt(call.message)
    bot.answer_callback_query(call.id, "ƒêang l·∫•y video m·ªõi...")

#===================================#
LANGUAGES = {
    "en": ("Ti·∫øng Anh", "üá¨üáß"),
    "vi": ("Ti·∫øng Vi·ªát", "üáªüá≥"),
    "ja": ("Ti·∫øng Nh·∫≠t", "üáØüáµ"),
    "ko": ("Ti·∫øng H√†n", "üá∞üá∑"),
    "zh": ("Ti·∫øng Trung", "üá®üá≥"),
    "fr": ("Ti·∫øng Ph√°p", "üá´üá∑"),
    "de": ("Ti·∫øng ƒê·ª©c", "üá©üá™"),
    "ru": ("Ti·∫øng Nga", "üá∑üá∫"),
    "es": ("Ti·∫øng T√¢y Ban Nha", "üá™üá∏"),
    "it": ("Ti·∫øng √ù", "üáÆüáπ"),
    "th": ("Ti·∫øng Th√°i", "üáπüá≠"),
    "id": ("Ti·∫øng Indonesia", "üáÆüá©"),
    "pt": ("Ti·∫øng B·ªì ƒê√†o Nha", "üáµüáπ"),
    "hi": ("Ti·∫øng Hindi", "üáÆüá≥"),
    "tr": ("Ti·∫øng Th·ªï Nhƒ© K·ª≥", "üáπüá∑"),
}

def get_lang_info(lang_code):
    name, flag = LANGUAGES.get(lang_code, (lang_code.upper(), "üåê"))
    return name, flag

@bot.message_handler(commands=['ggdich'])
def translate_message(message):
    content = message.text.split(" ", 2)
    if len(content) < 2 or not content[1].strip():
        bot.reply_to(message, (
            "‚ö†Ô∏è <b>Vui l√≤ng cung c·∫•p vƒÉn b·∫£n ƒë·ªÉ d·ªãch!</b>\n"
            "üìå <b>C√°ch d√πng:</b> <code>/ggdich [ng√¥n_ng·ªØ_ƒë√≠ch] [vƒÉn_b·∫£n]</code>\n"
            "üåç <b>V√≠ d·ª•:</b> <code>/ggdich en Xin ch√†o c·∫£ nh√†!</code>"
        ), parse_mode="HTML")
        return

    # X√°c ƒë·ªãnh ng√¥n ng·ªØ ƒë√≠ch & n·ªôi dung
    if len(content) == 2:
        target_lang = "vi"
        translate_this = content[1]
    else:
        target_lang = content[1].lower()
        translate_this = content[2]

    # C·∫£nh b√°o ƒë·ªô d√†i
    if len(translate_this) < 2:
        bot.reply_to(message, "üßê <b>VƒÉn b·∫£n qu√° ng·∫Øn ƒë·ªÉ d·ªãch!</b>", parse_mode="HTML")
        return
    if len(translate_this) > 1000:
        bot.reply_to(message, "üö´ <b>VƒÉn b·∫£n qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)!</b>", parse_mode="HTML")
        return

    url = f"https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl={target_lang}&dt=t&q={requests.utils.quote(translate_this)}"

    try:
        response = requests.get(url, timeout=8)
        data = response.json()
        if not data or not data[0]:
            raise Exception("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ d·ªãch.")

        translated_text = ''.join([item[0] for item in data[0] if item[0]])
        from_lang = data[2] if data[2] == data[8][0][0] else data[8][0][0]
        
        from_lang_name, from_flag = get_lang_info(from_lang)
        target_lang_name, to_flag = get_lang_info(target_lang)

        reply_message = (
            f"{from_flag} <b><u>{from_lang_name}</u></b> ‚ûú {to_flag} <b><u>{target_lang_name}</u></b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üî∏ VƒÉn b·∫£n g·ªëc:</b>\n<code>{translate_this}</code>\n"
            f"<b>üîπ ƒê√£ d·ªãch:</b>\n<blockquote><i>{translated_text}</i></blockquote>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üßë‚Äçüíª <b>HDSD:</b> <code>/ggdich [m√£_ng√¥n_ng·ªØ] [vƒÉn_b·∫£n]</code>\n"
            f"üìå <b>V√≠ d·ª•:</b> <code>/ggdich ja T√¥i y√™u ti·∫øng Nh·∫≠t</code>\n"
            f"üè∑ <b>M√£ ph·ªï bi·∫øn:</b> <code>en</code> (Anh), <code>vi</code> (Vi·ªát), <code>ja</code> (Nh·∫≠t), <code>ko</code> (H√†n), <code>zh</code> (Trung), <code>fr</code> (Ph√°p)"
        )
        bot.reply_to(message, reply_message, parse_mode="HTML")

    except Exception as e:
        bot.reply_to(
            message,
            f"‚ùå <b>Kh√¥ng th·ªÉ d·ªãch:</b> <code>{str(e)}</code>\n"
            "üí° <b>ƒê·∫£m b·∫£o b·∫°n nh·∫≠p ƒë√∫ng c√∫ ph√°p v√† c√≥ k·∫øt n·ªëi m·∫°ng.</b>",
            parse_mode="HTML"
        )

#===================================#
def get_instagram_media(insta_url):
    api_url = f"https://insta-dl.hazex.workers.dev/?url={insta_url}"
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        if data.get('result') and data['result'].get('url'):
            return data['result']['url'], data['result']['extension']
    return None, None

@bot.message_handler(commands=['downins'])
def insta_downloader(message):
    try:
        insta_url = message.text.replace("/downins", "").strip()
        if not insta_url:
            bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng g·ª≠i k√®m link Instagram sau l·ªánh /downins.\nüí¨ v√≠ d·ª•: <code>/downins https://www.instagram.com/p/ChGhCPwpV0H/?utm_source=ig_web_copy_link&igsh=MzRlODBiNWFlZA== </code>", parse_mode="HTML")
            return

        download_url, extension = get_instagram_media(insta_url)
        if download_url:
            if extension in ["mp4", "mkv"]:
                bot.send_chat_action(message.chat.id, "upload_video")
                bot.send_video(
                    message.chat.id,
                    video=download_url,
                    caption="üé• Video Instagram",
                    reply_to_message_id=message.message_id
                )
            elif extension in ["jpg", "jpeg", "png"]:
                bot.send_chat_action(message.chat.id, "upload_photo")
                bot.send_photo(
                    message.chat.id,
                    photo=download_url,
                    caption="üì∏ ·∫¢nh Instagram",
                    reply_to_message_id=message.message_id
                )
            else:
                bot.reply_to(message, "‚ö†Ô∏è ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
                return
            # X√ìA L·ªÜNH SAU KHI G·ª¨I FILE
            bot.delete_message(message.chat.id, message.message_id)
        else:
            bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng g·ª≠i k√®m link Instagram sau l·ªánh /downins.\nüí¨ v√≠ d·ª•: <code>/downins https://www.instagram.com/p/ChGhCPwpV0H/?utm_source=ig_web_copy_link&igsh=MzRlODBiNWFlZA== </code>", parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")

#===================================#
def parse_time(time_str):
    pattern = r"(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?"
    match = re.fullmatch(pattern, time_str.replace(" ", ""))
    if not match:
        return None
    days = int(match.group(1)) if match.group(1) else 0
    hours = int(match.group(2)) if match.group(2) else 0
    minutes = int(match.group(3)) if match.group(3) else 0
    if days == hours == minutes == 0:
        return None
    return timedelta(days=days, hours=hours, minutes=minutes)

def format_time(td):
    parts = []
    if td.days:
        parts.append(f"{td.days} ng√†y")
    hours = td.seconds // 3600
    if hours:
        parts.append(f"{hours} gi·ªù")
    minutes = (td.seconds % 3600) // 60
    if minutes:
        parts.append(f"{minutes} ph√∫t")
    return " ".join(parts) if parts else "0 ph√∫t"

def get_vietnam_time(dt=None):
    if dt is None:
        utc_now = datetime.now(timezone.utc)
    else:
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        utc_now = dt
    vietnam_now = utc_now + timedelta(hours=7)
    return vietnam_now.strftime("%d/%m/%Y %H:%M:%S")

@bot.message_handler(commands=['mute'])
def mute_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õîÔ∏è <b>B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.</b>", parse_mode="HTML")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚ùóÔ∏è <b>H√£y tr·∫£ l·ªùi tin nh·∫Øn c·ªßa ng∆∞·ªùi c·∫ßn MUTE!</b>\n\n<b>C√∫ ph√°p:</b> <code>/mute 1h30m</code>", parse_mode="HTML")
        return

    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ùóÔ∏è <b>B·∫°n ch∆∞a nh·∫≠p th·ªùi gian mute!</b>\n\n<b>V√≠ d·ª•:</b> <code>/mute 2h</code>", parse_mode="HTML")
        return

    time_str = args[1]
    delta = parse_time(time_str)
    if not delta:
        bot.reply_to(message, "‚ùóÔ∏è <b>ƒê·ªãnh d·∫°ng th·ªùi gian ch∆∞a ƒë√∫ng!</b>\nV√≠ d·ª•: <code>2h</code>, <code>1d3h15m</code>", parse_mode="HTML")
        return

    now_utc = datetime.now(timezone.utc)
    until_date = now_utc + delta
    user = message.reply_to_message.from_user
    user_id = user.id
    mention = f"<a href='tg://user?id={user_id}'>{user.first_name}</a>"

    try:
        bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=telebot.types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        bot.send_message(
            message.chat.id,
            f"""üîá <b>{mention} ƒë√£ b·ªã mute trong {format_time(delta)}!</b>

‚è∞ <b>B·∫Øt ƒë·∫ßu:</b> {get_vietnam_time(now_utc)}
‚è≥ <b>K·∫øt th√∫c:</b> {get_vietnam_time(until_date)}""",
            parse_mode="HTML",
            reply_to_message_id=message.reply_to_message.message_id
        )
        # X√ìA l·ªánh /mute sau khi th√†nh c√¥ng
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        bot.reply_to(message, f"‚ùå <b>Kh√¥ng th·ªÉ mute:</b> <code>{e}</code>", parse_mode="HTML")

@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õîÔ∏è <b>B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.</b>", parse_mode="HTML")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚ùóÔ∏è <b>H√£y tr·∫£ l·ªùi tin nh·∫Øn c·ªßa ng∆∞·ªùi c·∫ßn UNMUTE!</b>", parse_mode="HTML")
        return

    user = message.reply_to_message.from_user
    user_id = user.id
    mention = f"<a href='tg://user?id={user_id}'>{user.first_name}</a>"

    try:
        bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=telebot.types.ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_invite_users=True,
            )
        )
        bot.send_message(
            message.chat.id,
            f"üîä <b>{mention} ƒë√£ ƒë∆∞·ª£c unmute!</b>",
            parse_mode="HTML",
            reply_to_message_id=message.reply_to_message.message_id
        )
        # X√ìA l·ªánh /unmute sau khi th√†nh c√¥ng
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        bot.reply_to(message, f"‚ùå <b>Kh√¥ng th·ªÉ unmute:</b> <code>{e}</code>", parse_mode="HTML")

#===================================#
def get_flag(region):
    flags = {
        "VN": "üáªüá≥", "TH": "üáπüá≠", "BR": "üáßüá∑", "ID": "üáÆüá©",
        "SG": "üá∏üá¨", "US": "üá∫üá∏", "EU": "üá™üá∫", "IN": "üáÆüá≥"
    }
    return flags.get(region.upper(), "üè≥Ô∏è")
@bot.message_handler(commands=['ff'])
def get_ff_info(message):
    chat_id = message.chat.id
    message_id = message.message_id
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p UID. V√≠ d·ª•: <code>/ff 12345678 SG</code>", parse_mode="HTML")
        return

    uid = args[1]
    region = args[2] if len(args) > 2 else "VN"  # Region m·∫∑c ƒë·ªãnh l√† VN n·∫øu kh√¥ng c√≥
    url = f"https://ffwlxd-info.vercel.app/player-info?region={region}&uid={uid}"

    try:
        response = requests.get(url)
        if response.status_code != 200:
            bot.reply_to(message, "Kh√¥ng th·ªÉ k·∫øt n·ªëi API, vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")
            return

        data = response.json()
        if not data.get("AccountInfo"):
            bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i!", parse_mode="HTML")
            return

        p = data["AccountInfo"]
        clan = data.get("GuildInfo", {})
        captain = data.get("captainBasicInfo", {})
        pet = data.get("petInfo", {})
        credit = data.get("creditScoreInfo", {})
        profile = data.get("AccountProfileInfo", {})
        social = data.get("socialinfo", {})

        info = f"""
<b>TH√îNG TIN NG∆Ø·ªúI CH∆†I</b>
üë§ <b>Nickname:</b> <code>{p.get('AccountName')}</code>
üÜî <b>UID:</b> <code>{uid}</code>
üìà <b>Level:</b> <code>{p.get('AccountLevel')}</code>
üëç <b>Like:</b> <code>{p.get('AccountLikes')}</code>
üß¨ <b>XP:</b> <code>{p.get('AccountEXP')}</code>
üéñ <b>Rank:</b> <code>{p.get('BrMaxRank')} / {p.get('CsMaxRank')}</code>
üî• <b>ƒêi·ªÉm Rank:</b> <code>{p.get('BrRankPoint')} / {p.get('CsRankPoint')}</code>
üìÖ <b>Ng√†y t·∫°o:</b> <code>{p.get('AccountCreateTime')}</code>
üìÜ <b>ƒêƒÉng nh·∫≠p cu·ªëi:</b> <code>{p.get('AccountLastLogin')}</code>
üåç <b>M√°y ch·ªß:</b> <code>{p.get('AccountRegion')}</code>
‚öôÔ∏è <b>Phi√™n b·∫£n:</b> <code>{p.get('ReleaseVersion')}</code>

<b>TH√îNG TIN GUILD</b>
üè∞ <b>T√™n Qu√¢n ƒêo√†n:</b> <code>{clan.get('GuildName')}</code>
üÜî <b>ID:</b> <code>{clan.get('GuildID')}</code>
üìà <b>Level:</b> <code>{clan.get('GuildLevel')}</code>
üë• <b>Th√†nh vi√™n:</b> <code>{clan.get('GuildMember')}/{clan.get('GuildCapacity')}</code>

<b>CH·ª¶ QU√ÇN ƒêO√ÄN</b>
üëë <b>T√™n:</b> <code>{captain.get('nickname')}</code>
üÜî <b>UID:</b> <code>{captain.get('accountId')}</code>
üìà <b>Level:</b> <code>{captain.get('level')}</code>
üëç <b>Likes:</b> <code>{captain.get('liked')}</code>
üìÖ <b>Ng√†y t·∫°o:</b> <code>{captain.get('createAt')}</code>

<b>TH√îNG TIN PET</b>
üêæ <b>ID:</b> <code>{pet.get('id')}</code>
üìà <b>Level:</b> <code>{pet.get('level')}</code>
‚ö°Ô∏è <b>XP:</b> <code>{pet.get('exp')}</code>
üéØ <b>K·ªπ nƒÉng:</b> <code>{pet.get('selectedSkillId')}</code>

<b>TH√îNG TIN KH√ÅC</b>
‚ù§Ô∏è <b>Credit Score:</b> <code>{credit.get('creditScore')}</code>
üß• <b>Outfit:</b> <code>{profile.get('EquippedOutfit')}</code>
‚úçÔ∏è <b>Ch·ªØ k√Ω:</b> <code>{social.get('AccountSignature')}</code>
"""

        # Avatar v√† Outfit
        avatar_url = f"https://aditya-banner-v3op.onrender.com/banner-image?uid={uid}&region={p.get('AccountRegion')}"
        outfit_url = f"https://outfitinfo.vercel.app/outfit-image?uid={uid}&region={p.get('AccountRegion')}&key=99day"
        info += f'\n<a href="{avatar_url}">üñº Avatar c·ªßa b·∫°n</a>'

        bot.send_message(chat_id, info, reply_to_message_id=message_id, parse_mode="HTML")

        # G·ª≠i ·∫£nh outfit
        try:
            res_img = requests.get(outfit_url)
            if res_img.status_code == 200 and "image" in res_img.headers.get("Content-Type", ""):
                bot.send_photo(chat_id, BytesIO(res_img.content), caption="üßë‚Äçüé§ Outfit c·ªßa b·∫°n")
            else:
                bot.send_message(chat_id, f"Kh√¥ng l·∫•y ƒë∆∞·ª£c ·∫£nh outfit. Xem t·∫°i ƒë√¢y: {outfit_url}")
        except Exception as e:
            print("L·ªói ·∫£nh outfit:", e)
            bot.send_message(chat_id, f"Kh√¥ng l·∫•y ƒë∆∞·ª£c ·∫£nh outfit. Xem t·∫°i ƒë√¢y: {outfit_url}")

        try:
            bot.delete_message(chat_id, message_id)
        except:
            pass

    except Exception as e:
        bot.reply_to(message, f"L·ªói x·ª≠ l√Ω: {str(e)}", parse_mode="HTML")
# ========== H√†m g·ª≠i tin nh·∫Øn r·ªìi x√≥a sau delay gi√¢y ==========
def send_temp_message(chat_id, text, parse_mode=None, reply_to_message_id=None, delay=3):
    msg = bot.send_message(chat_id, text, parse_mode=parse_mode, reply_to_message_id=reply_to_message_id)
    threading.Timer(delay, lambda: safe_delete(msg)).start()
    return msg

def safe_delete(msg):
    try:
        bot.delete_message(msg.chat.id, msg.message_id)
    except:
        pass


# ========== H√†m g·ª≠i t·∫°m th·ªùi (gi·∫£ ƒë·ªãnh) ==========
def send_temp_message(chat_id, text):
    bot.send_message(chat_id, text, parse_mode="HTML")  # ho·∫∑c t√πy ch·ªânh

# ========== H√†m ki·ªÉm tra tr·∫°ng th√°i h·∫øt h·∫°n (gi·∫£ ƒë·ªãnh) ==========
def get_expired_status(user_id):
    # Tr·∫£ v·ªÅ (expired, expired_type)
    return False, ""

# ========== H√†m ki·ªÉm tra quy·ªÅn nh√≥m (gi·∫£ ƒë·ªãnh) ==========
def is_allowed_group(chat_id):
    return True
# ========== H√†m t·ª± ƒë·ªông buff ==========
def schedule_auto_buff(chat_id, username, message, user_id):
    WAIT_TIME = 900  # 15 ph√∫t
    send_temp_message(chat_id, f"‚è≥ [Auto Buff] S·∫Ω t·ª± ƒë·ªông buff l·∫°i @{username} sau 15 ph√∫t n·ªØa (k·ªÉ c·∫£ khi l·ªói)!")
    threading.Timer(WAIT_TIME, do_buff_follow, args=(chat_id, username, message, user_id, True)).start()

# ========== H√†m buff follow ==========
def do_buff_follow(chat_id, username, message, user_id, is_auto=False):
    api2 = f"https://offvn.x10.mx/php/tttik.php?id={username}&key=offvnx"
    try:
        response2 = requests.get(api2, timeout=60, verify=False)
        if response2.status_code != 200:
            raise Exception("API response not OK")
        data_api = response2.json()
    except:
        send_temp_message(chat_id, f"‚ùå [Auto Buff] L·ªói Khi L·∫•y Th√¥ng Tin T√†i Kho·∫£n @{username}")
        if auto_buff_by_username.get(username.lower(), False):
            schedule_auto_buff(chat_id, username, message, user_id)
        return

    if "data" not in data_api or "user_id" not in data_api["data"]:
        send_temp_message(chat_id, f"‚ùå [Auto Buff] Kh√¥ng T√¨m Th·∫•y T√†i Kho·∫£n @{username}")
        if auto_buff_by_username.get(username.lower(), False):
            schedule_auto_buff(chat_id, username, message, user_id)
        return

    info = data_api["data"]
    profile_pic = info.get('profile_pic', '')
    create_time = info.get('create_time', 'N/A')

    followers_raw = info.get("followers", "0")
    try:
        follower_before = int(followers_raw.replace(",", "").strip())
    except ValueError:
        send_temp_message(chat_id, f"‚ùå [Auto Buff] S·ªë follower c·ªßa @{username} kh√¥ng h·ª£p l·ªá: {followers_raw}")
        if auto_buff_by_username.get(username.lower(), False):
            schedule_auto_buff(chat_id, username, message, user_id)
        return

    # Ti·∫øn h√†nh buff
    api1 = f"https://offvn.x10.mx/fl.php?username={username}"
    try:
        response1 = requests.get(api1, timeout=60, verify=False)
        if response1.status_code != 200:
            raise Exception("API response not OK")
        response1_data = response1.json()
        if response1_data.get("success") is False:
            message_text = response1_data.get("message", "")
            send_temp_message(chat_id, f"‚ùå [Auto Buff] TƒÉng Follow Th·∫•t B·∫°i @{username}\nL√Ω do: {html.escape(message_text)}")
            if auto_buff_by_username.get(username.lower(), False):
                schedule_auto_buff(chat_id, username, message, user_id)
            return
    except:
        send_temp_message(chat_id, f"‚ùå [Auto Buff] TƒÉng Follow Th·∫•t B·∫°i (L·ªói khi g·ªçi API) @{username}")
        if auto_buff_by_username.get(username.lower(), False):
            schedule_auto_buff(chat_id, username, message, user_id)
        return

    # L·∫•y l·∫°i s·ªë follower m·ªõi
    try:
        response_check = requests.get(api2, timeout=60, verify=False)
        if response_check.status_code != 200:
            raise Exception("API response not OK")
        new_info = response_check.json().get("data", {})
        followers_after_raw = new_info.get("followers", "0")
        try:
            follower_after = int(followers_after_raw.replace(",", "").strip())
        except ValueError:
            follower_after = follower_before
    except:
        follower_after = follower_before

    follower_diff = follower_after - follower_before

    # === X√°c ƒë·ªãnh tr·∫°ng th√°i ===
    if follower_diff > 0:
        trang_thai = "Th√†nh c√¥ng ‚úÖ"
    else:
        trang_thai = "Th·∫•t B·∫°i ‚ùå"

    caption = f"""<blockquote>‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
‚îÇ<b>üë§ Name:</b> {html.escape(info.get('nickname', 'N/A'))}
‚îÇ<b>üÜî UID:</b> {info.get('user_id', 'N/A')}
‚îÇ<b>üîó Username:</b> @{html.escape(username)}
‚îÇ<b>üóìÔ∏è Ng√†y t·∫°o:</b> {html.escape(create_time)}
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠î
‚îÇ<b>üìâ FOLLOW BAN ƒê·∫¶U:</b> {follower_before:,} Followers
‚îÇ<b>üìä FOLLOW HI·ªÜN T·∫†I:</b> {follower_after:,} Followers
‚îÇ<b>üìà FOLLOW ƒê√É TƒÇNG:</b> +{follower_diff:,}
‚îÇ<b>üìã TR·∫†NG TH√ÅI:</b> {trang_thai}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì</blockquote>
<i> N·∫æU MU·ªêN TREO T·ª∞ ƒê·ªòNG H√ÉY NH·∫ÆN TIN üì© @off_vn ƒê·ªÇ H·ªñ TR·ª¢.</i>
    """

    try:
        if profile_pic:
            bot.send_photo(chat_id, photo=profile_pic, caption=caption, parse_mode="HTML")
        else:
            raise Exception("No profile pic")
    except:
        bot.send_message(chat_id, caption, parse_mode="HTML")

    if auto_buff_by_username.get(username.lower(), False):
        schedule_auto_buff(chat_id, username, message, user_id)
# ========== Handler cho l·ªánh /auto ==========
@bot.message_handler(commands=['auto'])
def toggle_auto_buff_user(message):
    if message.from_user.id != ADMIN_ID:
        send_temp_message(message.chat.id, "‚õîÔ∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
        return

    args = message.text.split()
    if len(args) < 3 or args[1].lower() not in ['on', 'off']:
        send_temp_message(
            message.chat.id, 
            "‚ö†Ô∏è S·ª≠ d·ª•ng\nN·∫øu b·∫≠t ‚úÖ th√¨ nh·∫≠p /auto on [username]\nN·∫øu t·∫Øt ‚ùå nh·∫≠p /auto off [username]"
        )
        return

    status = args[1].lower()
    username = args[2].strip().lower()
    auto_buff_by_username[username] = (status == 'on')

    if status == 'on':
        send_temp_message(
            message.chat.id, 
            f"‚úÖ ƒê√£ b·∫≠t t·ª± ƒë·ªông buff l·∫°i sau 15 ph√∫t cho @{username}"
        )
    else:
        send_temp_message(
            message.chat.id, 
            f"‚ùå ƒê√£ t·∫Øt t·ª± ƒë·ªông buff l·∫°i sau 15 ph√∫t cho @{username}"
        )
    
    # X√≥a l·ªánh sau khi th√†nh c√¥ng
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

# H√†m g·ª≠i tin nh·∫Øn t·∫°m th·ªùi v√† t·ª± x√≥a sau `delay` gi√¢y
def send_temp_message(chat_id, text, delay=3):
    msg = bot.send_message(chat_id, text)
    threading.Timer(delay, lambda: delete_message_safe(chat_id, msg.message_id)).start()

def delete_message_safe(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except:
        pass

# ========== Handler cho l·ªánh /fl ==========
@bot.message_handler(commands=['fl'])
def handle_fl(message):
    chat_id = message.chat.id
    message_id = message.message_id
    user_id = message.from_user.id
    expired, expired_type = get_expired_status(user_id)

    if expired:
        bot.send_message(chat_id, f"üîí Key {expired_type} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! H√£y l·∫•y l·∫°i key b·∫±ng l·ªánh /laykey.", parse_mode="Markdown")
        return

    if user_id not in valid_keys and user_id not in vip_keys:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è B·∫°n ch∆∞a c√≥ key ho·∫∑c key kh√¥ng h·ª£p l·ªá. L·∫•y key b·∫±ng l·ªánh /laykey v√† nh·∫≠p l·∫°i v·ªõi /k.",
            parse_mode="Markdown"
        )
        return

    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.", reply_to_message_id=message_id)
        return

    args = message.text.split()
    if len(args) < 2:
        bot.send_message(
            chat_id,
            "<b>‚ö†Ô∏è Vui L√≤ng Nh·∫≠p Username TikTok</b> \n\nV√≠ d·ª•: \n<code>/fl fanduonghoang</code>",
            parse_mode="HTML"
        )
        return

    username = args[1].strip().lower()
    auto_status = auto_buff_by_username.get(username, False)
    send_temp_message(chat_id, f"Ch·ª©c nƒÉng t·ª± ƒë·ªông c·ªßa @{username} hi·ªán t·∫°i {'B·∫¨T ‚úÖ' if auto_status else 'T·∫ÆT ‚ùå'}")

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ch·ªù ch∆∞a
    if chat_id in waiting_users and username in waiting_users[chat_id]:
        remaining_time = int(waiting_users[chat_id][username] - time.time())
        if remaining_time > 0:
            send_temp_message(chat_id, f"‚è≥ B·∫°n v·∫´n ph·∫£i ch·ªù {remaining_time // 60} ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i @{username}.")
            return
        else:
            del waiting_users[chat_id][username]

    # Hi·ªÉn th·ªã th√¥ng b√°o ti·∫øn tr√¨nh
    processing_msg = bot.send_message(
        chat_id,
        f"""
‚è≥ <b>ƒêang ti·∫øn h√†nh buff FOLLOW</b> @{html.escape(username)}
<i>üîÑ Vui l√≤ng ch·ªù trong gi√¢y l√°t...</i>
        """,
        parse_mode="HTML"
    )

    try:
        do_buff_follow(chat_id, username, message, user_id, is_auto=False)
    finally:
        try:
            bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
        except:
            pass

    # ƒê·∫∑t th·ªùi gian ch·ªù cho username ƒë√≥
    WAIT_TIME = 900  # 15 ph√∫t
    if chat_id not in waiting_users:
        waiting_users[chat_id] = {}
    waiting_users[chat_id][username] = time.time() + WAIT_TIME

    # X√≥a message g·ªëc ƒë·ªÉ tr√°nh spam
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
#===================================#
@bot.message_handler(commands=['downfb'])
def download_fb_video(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.")
        return
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p URL Facebook h·ª£p l·ªá. V√≠ d·ª•: /downfb https://www.facebook.com/share/r/1E1nqWLhyz/")
        return

    fb_url = args[1]
    api_url = f"https://subhatde.id.vn/fb/download?url={fb_url}"

    try:
        res = requests.get(api_url)
        data = res.json()

        if not data.get("medias"):
            bot.reply_to(message, "‚ùå Kh√¥ng t√¨m th·∫•y video. Vui l√≤ng ki·ªÉm tra l·∫°i URL.")
            return

        medias = data["medias"]
        links = {media["quality"]: media["url"] for media in medias if media["type"] == "video"}

        if not links:
            bot.reply_to(message, "‚ùå Kh√¥ng t√¨m th·∫•y video.")
            return

        user_video_info[message.from_user.id] = {"links": links, "command_msg_id": message.message_id}

        markup = InlineKeyboardMarkup()
        if "HD" in links:
            markup.add(InlineKeyboardButton("T·∫£i HD", callback_data="download_HD"))
        if "SD" in links:
            markup.add(InlineKeyboardButton("T·∫£i SD", callback_data="download_SD"))

        bot.send_message(
            message.chat.id,
            "<b>Ch·ªçn ch·∫•t l∆∞·ª£ng ƒë·ªÉ t·∫£i video:</b>",
            parse_mode="HTML",
            reply_markup=markup
        )

    except Exception as e:
        bot.reply_to(message, f"L·ªói: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("download_"))
def callback_download_video(call):
    user_id = call.from_user.id
    info = user_video_info.get(user_id)
    if not info:
        bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin video!")
        return

    quality = call.data.split("_")[1]
    video_url = info["links"].get(quality)
    if not video_url:
        bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng c√≥ video ch·∫•t l∆∞·ª£ng {quality}")
        return

    try:
        filename = f"temp_{user_id}_{quality}.mp4"
        video_data = requests.get(video_url)
        with open(filename, 'wb') as f:
            f.write(video_data.content)

        # X√≥a inline keyboard tr√™n message c≈©
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )

        # T·∫°o n√∫t cho c√°c ch·∫•t l∆∞·ª£ng c√≤n l·∫°i (n·∫øu c√≥)
        other_qualities = [q for q in info["links"] if q != quality]
        markup = None
        if other_qualities:
            markup = InlineKeyboardMarkup()
            for q in other_qualities:
                markup.add(InlineKeyboardButton(f"T·∫£i {q}", callback_data=f"download_{q}"))

        safe_quality = html.escape(quality)
        with open(filename, 'rb') as video:
            bot.send_video(
                call.message.chat.id,
                video,
                caption=f"<b>Ch·∫•t l∆∞·ª£ng:</b> {safe_quality}",
                parse_mode="HTML",
                reply_markup=markup
            )
        os.remove(filename)
        bot.answer_callback_query(call.id, f"ƒê√£ g·ª≠i video {quality}!")

        # X√≥a l·ªánh g·ªëc c·ªßa user (/downfb ...)
        if "command_msg_id" in info:
            try:
                bot.delete_message(call.message.chat.id, info["command_msg_id"])
            except:
                pass

        # N·∫øu ƒë√£ t·∫£i h·∫øt m·ªçi ch·∫•t l∆∞·ª£ng, x√≥a lu√¥n info
        if not other_qualities:
            user_video_info.pop(user_id, None)

    except Exception as e:
        bot.answer_callback_query(call.id, "L·ªói khi t·∫£i/g·ª≠i video!")
        bot.send_message(call.message.chat.id, f"L·ªói: {str(e)}")

#===================================#
VN_WEATHER = {
    "clear sky": "Tr·ªùi quang",
    "few clouds": "√çt m√¢y",
    "scattered clouds": "M√¢y r·∫£i r√°c",
    "broken clouds": "M√¢y t·ª´ng ph·∫ßn",
    "overcast clouds": "Nhi·ªÅu m√¢y",
    "shower rain": "M∆∞a r√†o",
    "light rain": "M∆∞a nh·∫π",
    "rain": "M∆∞a",
    "moderate rain": "M∆∞a v·ª´a",
    "heavy intensity rain": "M∆∞a to",
    "thunderstorm": "D√¥ng",
    "snow": "Tuy·∫øt",
    "mist": "S∆∞∆°ng m√π",
    "haze": "M√π kh√¥",
    "fog": "S∆∞∆°ng m√π",
    "drizzle": "M∆∞a ph√πn"
}

def get_geocode(city):
    try:
        url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={WEATHER_API_KEY}"
        res = requests.get(url).json()
        if res:
            return res[0]['lat'], res[0]['lon']
        return None, None
    except Exception as e:
        logger.error("L·ªói geocode: %s", e)
        return None, None

def get_weather(lat, lon):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?appid={WEATHER_API_KEY}&lat={lat}&lon={lon}&units=metric"
        return requests.get(url).json()
    except Exception as e:
        logger.error("L·ªói weather: %s", e)
        return {}

def get_uv_index(lat, lon):
    try:
        url = f"http://api.openweathermap.org/data/2.5/uvi?appid={WEATHER_API_KEY}&lat={lat}&lon={lon}"
        res = requests.get(url).json()
        return res.get('value')
    except Exception as e:
        logger.error("L·ªói UV Index: %s", e)
        return None

def format_weather(data, city):
    if not data or data.get('cod') != 200:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y {city}"

    weather = data['weather'][0]
    desc_en = weather['description']
    desc_vn = VN_WEATHER.get(desc_en, desc_en.capitalize())
    main = data['main']
    wind = data.get('wind', {})
    clouds = data.get('clouds', {}).get('all', 0)
    sys = data.get('sys', {})
    rain = data.get('rain', {}).get('1h', 0)
    snow = data.get('snow', {}).get('1h', 0)
    visibility = data.get('visibility', 0)
    lat, lon = data['coord']['lat'], data['coord']['lon']
    timezone_offset = data.get('timezone', 0)
    sunrise = sys.get('sunrise')
    sunset = sys.get('sunset')

    def unixtime_to_str(utime):
        if utime is None: return "?"
        # Chu·∫©n theo khuy·∫øn ngh·ªã m·ªõi, kh√¥ng c√≤n DeprecationWarning
        local_time = datetime.fromtimestamp(utime, tz=timezone.utc) + timedelta(seconds=timezone_offset)
        return local_time.strftime('%H:%M')

    # AQI
    try:
        aqi = None
        air_pollution = requests.get(
            f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}"
        ).json()
        if air_pollution and air_pollution.get('list'):
            aqi = air_pollution['list'][0]['main']['aqi']
    except Exception:
        aqi = None

    # UV Index
    uv_index = get_uv_index(lat, lon)

    # ƒê·ªãnh d·∫°ng tin nh·∫Øn
    msg = f"üå¶ <b>{city.title()}, {sys.get('country','')}</b> | <i>{desc_vn}</i>\n"
    msg += f"üå° Nhi·ªát ƒë·ªô: <b>{main['temp']}¬∞C</b> (c·∫£m gi√°c nh∆∞ {main['feels_like']}¬∞C)\n"
    msg += f"‚¨ÜÔ∏è Max: {main['temp_max']}¬∞C\n"
    msg += f"‚¨áÔ∏è Min: {main['temp_min']}¬∞C\n"
    msg += f"üíß ƒê·ªô ·∫©m: {main['humidity']}%\n"
    msg += f"üçÉ √Åp su·∫•t: {main['pressure']} hPa\n"
    msg += f"‚òÅÔ∏è M√¢y: {clouds}%\n"
    msg += f"üí® Gi√≥: {wind.get('speed',0)} m/s, h∆∞·ªõng {wind.get('deg','?')}¬∞\n"
    msg += f"üëÅÔ∏è T·∫ßm nh√¨n: {visibility/1000:.1f} km\n"
    if rain: msg += f"üåßÔ∏è M∆∞a (1h): {rain} mm\n"
    if snow: msg += f"‚ùÑÔ∏è Tuy·∫øt (1h): {snow} mm\n"
    if aqi: msg += f"?? Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ (AQI): {aqi}/5\n"
    if uv_index: msg += f"‚òÄÔ∏è Ch·ªâ s·ªë UV: {uv_index}\n"
    msg += f"üåÖ M·∫∑t tr·ªùi m·ªçc: {unixtime_to_str(sunrise)}\n"
    msg += f"üåá M·∫∑t tr·ªùi l·∫∑n: {unixtime_to_str(sunset)}\n"
    msg += f"üó∫ <a href='{GOOGLE_MAPS_URL}{lat},{lon}'>V·ªã tr√≠ tr√™n b·∫£n ƒë·ªì</a>"
    return msg

# Handler th·ªùi ti·∫øt
@bot.message_handler(commands=['thoitiet'])
def thoitiet(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        # Kh√¥ng d√πng d·∫•u < > ƒë·ªÉ tr√°nh l·ªói HTML parse
        bot.reply_to(message, "üìù D√πng: /thoitiet [t√™n th√†nh ph·ªë]")
        return
    city = args[1]
    lat, lon = get_geocode(city)
    if lat and lon:
        data = get_weather(lat, lon)
        msg = format_weather(data, city)
        # N·∫øu msg c√≥ HTML th√¨ m·ªõi d√πng parse_mode='HTML'
        bot.reply_to(message, msg, parse_mode='HTML', disable_web_page_preview=True)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_location(message.chat.id, latitude=lat, longitude=lon)
    else:
        bot.reply_to(message, "‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô th√†nh ph·ªë.")

#===================================#
start_time = time.time()

def format_time_unit(value, singular, plural):
    return f"{value} {singular if value == 1 else plural}"

def format_uptime(uptime_seconds):
    days, remainder = divmod(uptime_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    parts = []
    if days:
        parts.append(format_time_unit(days, "ng√†y", "ng√†y"))
    if hours:
        parts.append(format_time_unit(hours, "gi·ªù", "gi·ªù"))
    if minutes:
        parts.append(format_time_unit(minutes, "ph√∫t", "ph√∫t"))
    parts.append(format_time_unit(seconds, "gi√¢y", "gi√¢y"))
    return ', '.join(parts)

def delete_message_later(chat_id, message_id, delay=10):
    """X√≥a tin nh·∫Øn sau 'delay' gi√¢y."""
    time.sleep(delay)
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn: {e}")

@bot.message_handler(commands=['time'])
def bot_uptime(message):
    chat_id = message.chat.id
    message_id = message.message_id
    current_time = time.time()
    uptime_seconds = int(current_time - start_time)
    uptime_str = format_uptime(uptime_seconds)

    boot_time = datetime.fromtimestamp(start_time, tz=timezone(timedelta(hours=7)))
    now_time = datetime.now(timezone(timedelta(hours=7)))

    response = f"""
<b>‚è∞ Th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot</b>

<b>üîã Uptime:</b> <code>{uptime_str}</code>
<b>üü¢ Bot kh·ªüi ƒë·ªông l√∫c:</b> <code>{boot_time.strftime('%d/%m/%Y %H:%M:%S')}</code>
<b>‚åö Th·ªùi gian hi·ªán t·∫°i:</b> <code>{now_time.strftime('%d/%m/%Y %H:%M:%S')}</code>
    """.strip()

    # G·ª≠i tr·∫£ l·ªùi
    reply = bot.reply_to(message, response, parse_mode='HTML')

    # X√≥a tin nh·∫Øn l·ªánh c·ªßa user
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ x√≥a l·ªánh c·ªßa user: {e}")

    # (T√πy ch·ªçn) X√≥a tin nh·∫Øn tr·∫£ l·ªùi c·ªßa bot sau 10 gi√¢y
    # N·∫øu kh√¥ng c·∫ßn th√¨ c√≥ th·ªÉ b·ªè ph·∫ßn n√†y
    delay_seconds = 20
    threading.Thread(target=delete_message_later, args=(reply.chat.id, reply.message_id, delay_seconds)).start()

#===================================#
def get_expired_status(user_id):
    """Tr·∫£ v·ªÅ (True, lo·∫°i_key) n·∫øu user key h·∫øt h·∫°n, ng∆∞·ª£c l·∫°i (False, None)"""
    now = datetime.now()
    if user_id in valid_keys:
        exp = valid_keys[user_id].get('expiration')
        if exp and now > datetime.strptime(exp, "%d/%m/%Y %H:%M:%S"):
            valid_keys.pop(user_id, None)
            return True, "th∆∞·ªùng"
    if user_id in vip_keys:
        exp = vip_keys[user_id].get('expiration')
        if exp and now > datetime.strptime(exp, "%d/%m/%Y %H:%M:%S"):
            vip_keys.pop(user_id, None)
            return True, "VIP"
    return False, None

def get_key_info(user_id):
    """Tr·∫£ v·ªÅ dict info key (bao g·ªìm lo·∫°i, tr·∫°ng th√°i, ng√†y h·∫øt h·∫°n,...)"""
    now = datetime.now()
    info = {}
    if user_id in vip_keys:
        key_data = vip_keys[user_id]
        exp = datetime.strptime(key_data['expiration'], "%d/%m/%Y %H:%M:%S")
        info = {
            'type': 'VIP',
            'key': key_data['key'],
            'created': (exp - timedelta(days=30)).strftime("%d/%m/%Y %H:%M:%S"),
            'expired': key_data['expiration'],
            'status': 'üü¢ C√≤n h·∫°n' if now < exp else 'üî¥ H·∫øt h·∫°n'
        }
    elif user_id in valid_keys:
        key_data = valid_keys[user_id]
        exp = datetime.strptime(key_data['expiration'], "%d/%m/%Y %H:%M:%S")
        info = {
            'type': 'Th∆∞·ªùng',
            'key': key_data['key'],
            'created': (exp - timedelta(days=1)).strftime("%d/%m/%Y %H:%M:%S"),
            'expired': key_data['expiration'],
            'status': 'üü¢ C√≤n h·∫°n' if now < exp else 'üî¥ H·∫øt h·∫°n'
        }
    return info

@bot.message_handler(commands=['laykey'])
def getkey_cmd(message):
    user_id = int(message.from_user.id)
    current_date = get_vietnam_time()
    full_name = message.from_user.full_name
    current_day = int(datetime.now().strftime('%d'))
    keyso = str(current_day * 8276383 + 93732373 * user_id + user_id * user_id - current_day)
    key = f"BOT/{keyso}"
    url = f"https://link4m.co/api-shorten/v2?api=6506fd36fba45f6d07613987&url=https://offvn.x10.mx?key={key}"
    data = requests.get(url).json()
    linkvuot = data.get('shortenedUrl', 'L·ªói l·∫•y link')
    tgsuccess = datetime.now().strftime("%d/%m/%Y")
    video = random.choice([
    "https://spamcallsms.x10.mx/4.mp4",
    "https://spamcallsms.x10.mx/11.mp4",
    "https://spamcallsms.x10.mx/2.mp4",
    "https://spamcallsms.x10.mx/3.mp4",
    "https://spamcallsms.x10.mx/5.mp4",
    "https://spamcallsms.x10.mx/6.mp4",
    "https://spamcallsms.x10.mx/7.mp4",
    "https://spamcallsms.x10.mx/8.mp4",
    "https://spamcallsms.x10.mx/9.mp4",
    "https://spamcallsms.x10.mx/10.mp4",
])

    help_text = (
        f"üëã Xin ch√†o <a href='tg://user?id={user_id}'>{full_name}</a>!\n\n"
        f"üìÖ <b>Ng√†y:</b> {current_date}\n"
        f"üåê <b>Link nh·∫≠n key:</b> {linkvuot}\n\n"
        f"‚ö†Ô∏è <b>H∆Ø·ªöNG D·∫™N:</b>\n"
        f"1Ô∏è‚É£ Truy c·∫≠p link tr√™n, l·∫•y key v∆∞·ª£t link.\n"
        f"2Ô∏è‚É£ D√πng l·ªánh <code>/k [KEY]</code> ƒë·ªÉ x√°c th·ª±c key.\n"
        f"üí° <b>V√≠ d·ª•:</b> <code>/k BOT/42236748505484322438</code>\n"
        f"üì© Sau khi x√°c th·ª±c, b·∫°n c√≥ th·ªÉ d√πng ƒë∆∞·ª£c l·ªánh\n"
    )

    bot.send_video(
        message.chat.id, 
        video=video, 
        caption=help_text, 
        reply_to_message_id=message.message_id, 
        supports_streaming=True, 
        parse_mode='HTML'
    )

@bot.message_handler(commands=['k'])
def key_cmd(message):
    args = message.text.split(" ")
    user_id = message.from_user.id

    if len(args) < 2:
        bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p key h·ª£p l·ªá. V√≠ d·ª•: `/k BOT/42236748505409835000`", parse_mode="Markdown")
        return

    input_key = args[1]
    current_day = int(datetime.now().strftime('%d'))
    correct_key = f"BOT/{str(current_day * 8276383 + 93732373 * user_id + user_id * user_id - current_day)}"

    # Check key VIP ho·∫∑c key ng√†y
    expired, expired_type = get_expired_status(user_id)
    if expired:
        bot.reply_to(message, f"üîí Key {expired_type} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! H√£y l·∫•y l·∫°i key m·ªõi v·ªõi l·ªánh /laykey.", parse_mode="Markdown")
        return

    if (input_key == correct_key) or (user_id in vip_keys):
        if user_id in vip_keys:
            info = get_key_info(user_id)
            bot.reply_to(
                message,
                f"‚úÖ B·∫°n ƒë√£ c√≥ key VIP ({info['key']})\n"
                f"‚è∞ H·∫øt h·∫°n: {info['expired']}\n"
                f"Tr·∫°ng th√°i: {info['status']}\n\n"
                f"<b>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ d√πng ƒë∆∞·ª£c l·ªánh</b>",
                parse_mode="HTML"
            )
            return

        expiration_date = datetime.now() + timedelta(days=1)
        expiration_str = expiration_date.strftime("%d/%m/%Y %H:%M:%S")
        valid_keys[user_id] = {'key': input_key, 'day': current_day, 'expiration': expiration_str}
        bot.reply_to(
            message,
            f"‚úÖ X√°c th·ª±c key th√†nh c√¥ng!\n"
            f"üîë Key: <code>{input_key}</code>\n"
            f"‚è∞ Th·ªùi h·∫°n: {expiration_str}\n"
            f"<b>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ d√πng ƒë∆∞·ª£c l·ªánh</b>",
            parse_mode="HTML"
        )
    else:
        bot.reply_to(message, "‚ùå Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c l·∫•y key m·ªõi v·ªõi /laykey.", parse_mode="Markdown")

@bot.message_handler(commands=['themvip'])
def add_vip_direct(message):
    user_id = message.from_user.id

    if user_id != ADMIN_ID:
        bot.reply_to(
            message,
            "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Ch·ªâ admin m·ªõi ƒë∆∞·ª£c c·∫•p quy·ªÅn VIP.",
            parse_mode="Markdown"
        )
        return

    args = message.text.strip().split(" ")
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(
            message,
            "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng Telegram user ID. V√≠ d·ª•: `/themvip 6452283369 365`",
            parse_mode="Markdown"
        )
        return

    target_user_id = int(args[1])
    days = 30
    if len(args) >= 3 and args[2].isdigit():
        days = int(args[2])
        if days <= 0 or days > 365:
            bot.reply_to(
                message,
                "‚ö†Ô∏è S·ªë ng√†y VIP ph·∫£i trong kho·∫£ng 1-365.",
                parse_mode="Markdown"
            )
            return

    expired, _ = get_expired_status(target_user_id)
    if target_user_id in vip_keys and not expired:
        key_info = get_key_info(target_user_id)
        bot.reply_to(
            message,
            f"‚ùó Ng∆∞·ªùi d√πng n√†y ƒë√£ c√≥ quy·ªÅn VIP c√≤n h·∫°n!\n"
            f"‚è∞ H·∫øt h·∫°n: {key_info.get('expired', '')}",
            parse_mode="Markdown"
        )
        return

    expiration_date = datetime.now() + timedelta(days=days)
    expiration_str = expiration_date.strftime("%d/%m/%Y %H:%M:%S")
    vip_keys[target_user_id] = {"key": "no-key", "expiration": expiration_str}

    bot.reply_to(
        message,
        f"‚úÖ ƒê√£ c·∫•p quy·ªÅn VIP tr·ª±c ti·∫øp cho user `{target_user_id}` trong {days} ng√†y!\n"
        f"‚è∞ H·∫øt h·∫°n: {expiration_str}",
        parse_mode="Markdown"
    )

    try:
        bot.send_message(
            target_user_id,
            f"‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn VIP trong {days} ng√†y!\n"
            f"‚è∞ H·∫øt h·∫°n: {expiration_str}\n"
            f"‚û°Ô∏è C√°c t√≠nh nƒÉng VIP hi·ªán ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a.",
            parse_mode="Markdown"
        )
    except Exception:
        pass

    # X√≥a l·ªánh g·ªëc
    try:
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass
@bot.message_handler(commands=['mail'])
def create_mail(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.", reply_to_message_id=message_id)
        return
    user_id = message.from_user.id
    expired, expired_type = get_expired_status(user_id)
    if expired:
        bot.reply_to(message, f"üîí Key {expired_type} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! H√£y l·∫•y l·∫°i key b·∫±ng l·ªánh /laykey.", parse_mode="Markdown")
        return

    if user_id not in valid_keys and user_id not in vip_keys:
        bot.reply_to(
            message,
            "‚ö†Ô∏è B·∫°n ch∆∞a c√≥ key ho·∫∑c key kh√¥ng h·ª£p l·ªá. L·∫•y key b·∫±ng l·ªánh /laykey v√† nh·∫≠p l·∫°i v·ªõi /k.",
            parse_mode="Markdown"
        )
        return

    args = message.text.strip().split(" ")
    if len(args) < 2:
        bot.reply_to(
            message,
            "‚ùå Vui l√≤ng nh·∫≠p t√™n email. V√≠ d·ª•: `/mail offvnx`, kh√¥ng c·∫ßn nh·∫≠p @hunght1890.com ph√≠a sau.",
            parse_mode="Markdown"
        )
        return
        
    email_name = args[1]
    email = f"{email_name}@hunght1890.com"
    info = get_key_info(user_id)
    bot.reply_to(
        message,
        f"üìß Email c·ªßa b·∫°n l√†: `{email}`\n"
        f"üîë Lo·∫°i key: {info.get('type', 'Kh√¥ng x√°c ƒë·ªãnh')}\n"
        f"‚è∞ H·∫°n key: {info.get('expired', 'N/A')}\n"
        f"‚úÖ Sau khi t·∫°o mail th√†nh c√¥ng, nh·∫≠p l·ªánh `/sms {email_name}` ƒë·ªÉ ki·ªÉm tra h·ªôp th∆∞.",
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['sms'])
def check_inbox(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.", reply_to_message_id=message_id)
        return
    user_id = message.from_user.id
    expired, expired_type = get_expired_status(user_id)
    if expired:
        bot.reply_to(
            message,
            f"üîí Key {expired_type} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! H√£y l·∫•y l·∫°i key b·∫±ng l·ªánh /laykey.",
            parse_mode="Markdown"
        )
        return

    if user_id not in valid_keys and user_id not in vip_keys:
        bot.reply_to(
            message,
            "‚ö†Ô∏è B·∫°n ch∆∞a c√≥ key ho·∫∑c key kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p key b·∫±ng l·ªánh `/k` tr∆∞·ªõc!",
            parse_mode="Markdown"
        )
        return

    args = message.text.strip().split(" ")
    if len(args) < 2:
        bot.reply_to(
            message,
            "‚ùå Vui l√≤ng nh·∫≠p t√™n email ƒë·ªÉ ki·ªÉm tra h·ªôp th∆∞. V√≠ d·ª•: `/sms offvnx`",
            parse_mode="Markdown"
        )
        return

    email_name = args[1]
    email = f"{email_name}@hunght1890.com"
    url = BASE_URL.format(email)

    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 404:
            bot.reply_to(
                message,
                f"üì≠ H·ªôp th∆∞ `{email}` hi·ªán ch∆∞a c√≥ th∆∞ n√†o.",
                parse_mode="Markdown"
            )
            return
        elif response.status_code == 500:
            bot.reply_to(
                message,
                "‚ùå L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode="Markdown"
            )
            return
        elif response.status_code == 200:
            emails = response.json()
            if not emails:
                bot.reply_to(
                    message,
                    f"üì≠ H·ªôp th∆∞ `{email}` hi·ªán ch∆∞a c√≥ th∆∞ n√†o.",
                    parse_mode="Markdown"
                )
                return

            reply_msg = f"üì• *H·ªôp th∆∞ c·ªßa `{email}`*:\n"
            for idx, mail in enumerate(emails[:3], 1):
                reply_msg += (
                    f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ {idx} ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    f"\n‚úâÔ∏è *T·ª´*: `{mail.get('from', 'Kh√¥ng r√µ')}`"
                    f"\nüìå *Ti√™u ƒë·ªÅ*: `{mail.get('subject', 'Kh√¥ng r√µ')}`"
                    f"\nüì• *G·ª≠i ƒë·∫øn*: `{mail.get('to', 'Kh√¥ng r√µ')}`"
                    f"\nüïí *Th·ªùi gian*: `{mail.get('date', 'Kh√¥ng r√µ')}`\n"
                )
            reply_msg += "\n\nüí° Xem th√™m b·∫±ng c√°ch truy c·∫≠p l·∫°i sau ho·∫∑c nh·∫≠p l·∫°i l·ªánh."

            bot.reply_to(
                message,
                reply_msg,
                parse_mode="Markdown"
            )
            return
        else:
            bot.reply_to(
                message,
                "‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i.",
                parse_mode="Markdown"
            )
    except requests.RequestException:
        bot.reply_to(
            message,
            "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API, vui l√≤ng th·ª≠ l·∫°i sau.",
            parse_mode="Markdown"
        )

#===================================#
@bot.message_handler(commands=['start'])
def handle_start_help(message):
    chat_id = message.chat.id
    message_id = message.message_id
    help_text = (
        "<b>D∆Ø·ªöI ƒê√ÇY L√Ä DANH S√ÅCH L·ªÜNH\n"
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ï† /proxy - Reg Proxy\n"
        "‚ï† /search - T√¨m ki·∫øm b√†i h√°t tr√™n Spotify\n"
        "‚ï† /spotify - Download nh·∫°c tr√™n Spotify\n"
        "‚ï† /roblox - Check th√¥ng tin roblox\n"
        "‚ï† /code - L·∫•y source HTML website\n"
        "‚ï† /id - Xem id nh√≥m ho·∫∑c id b·∫£n th√¢n\n"
        "‚ï† /ggdich - D·ªãch ng√¥n ng·ªØ\n"
        "‚ï† /gaitt - Random g√°i xinh tiktok\n"
        "‚ï† /downins - T·∫£i video + ·∫£nh Instagram\n"
        "‚ï† /ff - Check Th√¥ng Tin Free Fire\n"
        "‚ï† /fl - Buff follow Tiktok üÜï\n"
        "‚ï† /thoitiet - L·∫•y th√¥ng tin th·ªùi ti·∫øt\n"
        "‚ï† /ip - Check Th√¥ng Tin IP\n"
        "‚ï† /github - L·∫•y th√¥ng tin github\n"
        "‚ï† /scr - T·∫£i source bot telegram üìÅ\n"
        "‚ï† /downfb - T·∫£i video t·ª´ facebook\n"
        "‚ï† /mail - T·∫°o mail v√† ƒë·ªçc h·ªôp th∆∞ mail üìÆ\n"
        "‚ï† /qrnd - T·∫°o QR Bank C√≥ N·ªôi Dung\n"
        "‚ï† /2fa - L·∫•y m√£ Two-Factor Authentication\n"
        "‚ï† /fb - Check Th√¥ng Tin Facebook\n"
        "‚ï† /vipham - Check Ph·∫°t Ngu·ªôi Xe M√°y, Xe √î T√¥\n"
        "‚ï† /kqxs - Xem K·∫øt Qu·∫£ X·ªï S·ªë H√¥m Nay\n"
        "‚ï† /qrbank - T·∫°o QR Chuy·ªÉn Kho·∫£n\n"
        "‚ï† /qrcode - T·∫°o m√£ QR T·ª´ VƒÉn B·∫£n\n"
        "‚ï† /tt - Check Info Nick Tiktok\n"
        "‚ï† /idfb - L·∫•y ID Facebook\n"
        "‚ï† /thongtin - Xem Th√¥ng Tin Nick Telegram\n"
        "‚ï† /ask - Tr·∫£ L·ªùi T·∫•t C·∫£ C√¢u H·ªèi Chat Gemini\n"
        "‚ï† /tv - ƒê·ªïi Ti·∫øng Vi·ªát Tr√™n Telegram\n"
        "‚ï† /tiktok - T·∫£i Video Kh√¥ng Logo Tiktok\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù</b>\n"
        "üí¨ L∆ØU √ù: B·∫°n c√≥ th·ªÉ b·∫•m v√†o c√°c l·ªánh ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng."
    )

    bot.send_message(
        chat_id,
        help_text,
        parse_mode="HTML",
        reply_to_message_id=message_id
    )

    # X√≥a tin nh·∫Øn l·ªánh
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

#===================================#
languages = [
    ["Ti·∫øng Vi·ªát", "VN", "https://t.me/setlanguage/abcxyz"],
    ["Ti·∫øng Vi·ªát Beta", "VN", "https://t.me/setlanguage/vi-beta"],
    ["English", "GB", "https://t.me/setlanguage/en"],
    ["Fran√ßais", "FR", "https://t.me/setlanguage/fr"],
    ["Espa√±ol", "ES", "https://t.me/setlanguage/es"],
    ["Deutsch", "DE", "https://t.me/setlanguage/de"],
    ["–†—É—Å—Å–∫–∏–π", "RU", "https://t.me/setlanguage/ru"],
    ["‰∏≠Êñá", "CN", "https://t.me/setlanguage/zh-hans"],
    ["Êó•Êú¨Ë™û", "JP", "https://t.me/setlanguage/ja"],
]

# H√†m l·∫•y emoji c·ªù qu·ªëc gia t·ª´ m√£ qu·ªëc gia
def get_flag(code):
    if code and len(code) == 2:
        return chr(0x1F1E6 + ord(code[0].upper()) - ord('A')) + chr(0x1F1E6 + ord(code[1].upper()) - ord('A'))
    return "üè≥"

@bot.message_handler(commands=['tv'])
def handle_tv(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.")
        return

    # T·∫°o inline keyboard ch·ªçn ng√¥n ng·ªØ
    markup = InlineKeyboardMarkup()
    for name, code, url in languages:
        flag = get_flag(code)
        btn = InlineKeyboardButton(text=f"{name} {flag}", url=url)
        markup.add(btn)

    # G·ª≠i tin nh·∫Øn ch·ªçn ng√¥n ng·ªØ
    bot.send_message(
        chat_id,
        "üåê <b>Ch·ªçn ng√¥n ng·ªØ:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

    # X√≥a tin nh·∫Øn l·ªánh g·ªëc
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass  # N·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c th√¨ th√¥i

#===================================#
# H√†m ch·ªçn icon ng·∫´u nhi√™n
def get_reaction():
    reactions = ['‚ú®', '‚ö°', 'üî•', '‚úÖ', 'üí°', 'üîç', 'ü§ñ']
    return reactions[int(time.time()) % len(reactions)]

@bot.message_handler(commands=['ask'])
def handle_ask(message):
    query = message.text[len('/ask '):].strip()
    
    if not query:
        bot.reply_to(message, "‚ùó *Vui l√≤ng nh·∫≠p c√¢u h·ªèi sau l·ªánh `/ask`.*", parse_mode="Markdown")
        return

    bot.send_chat_action(message.chat.id, 'typing')
    start_time = time.time()

    try:
        url = f'https://blackbox-pro.bjcoderx.workers.dev/?q={query}'
        response = requests.get(url, timeout=20)  # TƒÉng timeout l√™n 20 gi√¢y
        data = response.json()
        elapsed = time.time() - start_time

        if data.get("status") == "success":
            result = data["data"].get("result", "").strip()

            if not result or len(result) < 3:
                result = "_Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p._"

            reply_text = (
                f"{get_reaction()} *Tr·∫£ l·ªùi cho c√¢u h·ªèi c·ªßa b·∫°n:*\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                f"‚ùì *C√¢u h·ªèi:* `{query}`\n"
                f"üí¨ *Tr·∫£ l·ªùi:* {result}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                f"_‚è± Th·ªùi gian ph·∫£n h·ªìi: {elapsed:.2f} gi√¢y_"
            )
        else:
            reply_text = "‚ùå *API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng.*"

    except requests.exceptions.Timeout:
        reply_text = "‚è≥ *M√°y ch·ªß m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau!*"
    except Exception as e:
        reply_text = f"‚ö†Ô∏è *ƒê√£ x·∫£y ra l·ªói:* `{str(e)}`"

    # Tr·∫£ l·ªùi ng∆∞·ªùi d√πng
    bot.reply_to(message, reply_text, parse_mode="Markdown")

    # Xo√° tin nh·∫Øn g·ªëc c·ªßa ng∆∞·ªùi d√πng sau 2 gi√¢y
    time.sleep(0.1)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

#===================================#
def get_facebook_info(url):
    api_url = "https://offvn.x10.mx/php/convertID.php?url=" + requests.utils.quote(url)
    try:
        response = requests.get(api_url, timeout=10)
        data = response.json()
        return {
            'id': data.get('id'),
            'name': data.get('name')
        }
    except Exception:
        return None

@bot.message_handler(commands=['idfb'])
def handle_idfb(message):
    chat_id = message.chat.id
    message_id = message.message_id
    user = message.from_user
    current_date = get_vietnam_time()

    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    params = message.text.split(" ", 1)
    if len(params) < 2:
        bot.send_message(
            chat_id,
            "‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /idfb [link ho·∫∑c id]",
            parse_mode="HTML",
            reply_to_message_id=message_id
        )
        return

    parameter = params[1].strip()
    facebook_id = parameter if parameter.isdigit() else None
    facebook_name = None

    if not facebook_id:
        if "facebook.com" not in parameter:
            bot.send_message(
                chat_id,
                "‚ùå Li√™n k·∫øt kh√¥ng h·ª£p l·ªá.",
                parse_mode="HTML",
                reply_to_message_id=message_id
            )
            return

        fb_info = get_facebook_info(parameter)
        if not fb_info or not fb_info.get('id'):
            bot.send_message(
                chat_id,
                "‚ùå Kh√¥ng th·ªÉ l·∫•y ID t·ª´ li√™n k·∫øt Facebook.",
                parse_mode="HTML",
                reply_to_message_id=message_id
            )
            return
        facebook_id = fb_info.get('id')
        facebook_name = fb_info.get('name')
    else:
        facebook_name = "Kh√¥ng l·∫•y ƒë∆∞·ª£c"

    avatar_url = f"https://graph.facebook.com/{facebook_id}/picture?width=1500&height=1500&access_token=2712477385668128|b429aeb53369951d411e1cae8e810640"

    caption = (
        f"<b>UID Facebook:</b> <code>{facebook_id}</code>\n"
        f"<b>H·ªç t√™n Facebook:</b> <code>{facebook_name or 'Kh√¥ng l·∫•y ƒë∆∞·ª£c'}</code>\n"
        f"<b>Link Facebook:</b> https://www.facebook.com/profile.php?id={facebook_id}\n\n"
        f"<b>üóìÔ∏è Ng√†y l·∫•y d·ªØ li·ªáu:</b> <i>{current_date} (GMT+7)</i>\n"
    )

    bot.send_photo(
        chat_id,
        avatar_url,
        caption=caption,
        parse_mode="HTML",
        reply_to_message_id=message_id
    )

    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

#===================================#
# H√†m l·∫•y th√¥ng tin IP
def get_ip_info(ip):
    url = f"https://ip-info.bjcoderx.workers.dev/?ip={requests.utils.quote(ip)}"
    try:
        response = requests.get(url, timeout=10)
        return response.json()
    except Exception:
        return None

@bot.message_handler(commands=['ip'])
def handle_ip(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    params = message.text.split(" ", 1)
    if len(params) < 2:
        bot.send_message(
            chat_id,
            "‚ùå Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ IP sau l·ªánh /ip\nV√≠ d·ª•: <code>/ip 14.191.136.129</code>.",
            parse_mode="HTML",
            reply_to_message_id=message_id
        )
        return

    ip = params[1].strip()
    data = get_ip_info(ip)

    if not data or "ip" not in data:
        bot.send_message(
            chat_id,
            "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i sau.",
            reply_to_message_id=message_id
        )
        bot.delete_message(chat_id, message_id)
        return

    # T·∫°o n·ªôi dung tr·∫£ v·ªÅ
    def get_val(obj, key, default=""):
        return obj.get(key, default) if obj else default

    tz = get_val(data, 'time_zone')
    currency = get_val(data, 'currency')

    response_text = (
        f"<b>ƒê·ªãa ch·ªâ IP:</b> {get_val(data, 'ip')}\n"
        f"<b>Ch√¢u l·ª•c:</b> {get_val(data, 'continent_name')} ({get_val(data, 'continent_code')})\n"
        f"<b>Qu·ªëc gia:</b> {get_val(data, 'country_name')} ({get_val(data, 'country_code2')})\n"
        f"<b>Th√†nh ph·ªë:</b> {get_val(data, 'city')}\n"
        f"<b>Bang/T·ªânh:</b> {get_val(data, 'state_prov')}\n"
        f"<b>Qu·∫≠n/Huy·ªán:</b> {get_val(data, 'district')}\n"
        f"<b>Vƒ© ƒë·ªô:</b> {get_val(data, 'latitude')}\n"
        f"<b>Kinh ƒë·ªô:</b> {get_val(data, 'longitude')}\n"
        f"<b>M√∫i gi·ªù:</b> {get_val(tz, 'name')} (Offset: {get_val(tz, 'offset')})\n"
        f"<b>Ti·ªÅn t·ªá:</b> {get_val(currency, 'name')} ({get_val(currency, 'symbol')})\n"
        f"<b>Cung c·∫•p d·ªãch v·ª• internet (ISP):</b> {get_val(data, 'isp')}\n"
        f"<b>T·ªï ch·ª©c:</b> {get_val(data, 'organization')}\n"
        f"<b>Flag qu·ªëc gia:</b> {get_val(data, 'country_flag')}\n"
        f"<b>Bi·ªÉu t∆∞·ª£ng qu·ªëc gia:</b> {get_val(data, 'country_emoji')}\n"
        f"<b>Geo Name ID:</b> {get_val(data, 'geoname_id')}\n"
        f"<b>Ng√¥n ng·ªØ:</b> {get_val(data, 'languages')}\n"
        f"<b>Th·ªß ƒë√¥:</b> {get_val(data, 'country_capital')}\n"
        f"<b>M√£ b∆∞u ch√≠nh:</b> {get_val(data, 'zipcode')}\n"
        f"<b>M√£ g·ªçi qu·ªëc gia:</b> {get_val(data, 'calling_code')}\n"
        f"<b>T√™n qu·ªëc gia ch√≠nh th·ª©c:</b> {get_val(data, 'country_name_official')}\n"
        f"<b>Th·ªùi gian hi·ªán t·∫°i (theo m√∫i gi·ªù c·ªßa IP):</b> {get_val(tz, 'current_time')}\n"
    )

    bot.send_message(
        chat_id,
        response_text,
        parse_mode="HTML",
        reply_to_message_id=message_id
    )
    bot.delete_message(chat_id, message_id)

#===================================#
@bot.message_handler(commands=['qrcode'])
def handle_qrcode(message):
    chat_id = message.chat.id
    message_id = message.message_id
    user_id = message.from_user.id
    current_date = get_vietnam_time()

    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    params = message.text.split(" ", 1)
    if len(params) < 2:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /qrcode {n·ªôi dung}\nV√≠ d·ª•: /qrcode Hello.",
            reply_to_message_id=message_id
        )
        bot.delete_message(chat_id, message_id)
        return

    noidung = urllib.parse.quote(params[1])
    qr_code_url = f"https://offvn.x10.mx/php/qr.php?text={noidung}"

    caption = (
        f"<b>N·ªôi dung QR Code:</b> <code>{params[1]}</code>\n"
        f"<b>Th√¥ng tin b·ªï sung:</b>\n"
        f"<i>ID Ng∆∞·ªùi D√πng:</i> <code>{user_id}</code>\n"
        f"<i>Message ID:</i> <code>{message_id}</code>\n"
        f"<b>Th·ªùi gian t·∫°o:</b> <i>{current_date}</i>\n"
    )

    bot.send_photo(
        chat_id,
        qr_code_url,
        caption=caption,
        parse_mode="HTML",
        reply_to_message_id=message_id
    )
    bot.delete_message(chat_id, message_id)

#===================================#
# H√†m l·∫•y d·ªØ li·ªáu vi ph·∫°m
def get_violation_data(bsx, loaixe):
    url = f"https://vietcheckcar.com/api/api.php?api_key=sfund&bsx={requests.utils.quote(bsx)}&bypass_cache=0&loaixe={loaixe}&vip=0"
    try:
        response = requests.get(url, timeout=10)
        return response.json()
    except Exception:
        return None

# H√†m ƒë·ªãnh d·∫°ng th√¥ng tin vi ph·∫°m
def format_violation_info(data, vehicle_type):
    if data and data.get('code') == 1:
        biensoxe = data.get('biensoxe', "N/A")
        total = data.get('totalViolations', 0)
        violation = data.get('violations', [{}])[0] if data.get('violations') else None

        if violation:
            image_url = violation.get('image_url', None)
            text = (
                f"<b>{vehicle_type.upper()} - {biensoxe}</b>\n"
                f"‚Ä¢ T·ªïng vi ph·∫°m: {total}\n"
                f"‚Ä¢ Tr·∫°ng th√°i: {violation.get('trang_thai', 'N/A')}\n"
                f"‚Ä¢ Th·ªùi gian: {violation.get('thoi_gian_vi_pham', 'N/A')}\n"
                f"‚Ä¢ ƒê·ªãa ƒëi·ªÉm: {violation.get('dia_diem_vi_pham', 'N/A')}\n"
                f"‚Ä¢ H√†nh vi: {violation.get('hanh_vi_vi_pham', 'N/A')}\n"
                f"‚Ä¢ M·ª©c ph·∫°t: {violation.get('muc_phat', 'N/A')}\n\n"
            )
            return text, image_url
        else:
            return f"<b>{vehicle_type.upper()}:</b> Kh√¥ng c√≥ vi ph·∫°m.\n\n", None
    return "", None

@bot.message_handler(commands=['vipham'])
def handle_vipham(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    params = message.text.strip().split()
    if len(params) < 2:
        bot.send_message(
            chat_id,
            "Vui l√≤ng nh·∫≠p bi·ªÉn s·ªë. V√≠ d·ª•: /vipham 98B304452",
            reply_to_message_id=message_id
        )
        bot.delete_message(chat_id, message_id)
        return

    bsx = params[1].strip()
    text_xemay, img_xemay = format_violation_info(get_violation_data(bsx, 2), "xe m√°y")
    text_oto, img_oto = format_violation_info(get_violation_data(bsx, 1), "√¥ t√¥")

    message_text = text_xemay + text_oto
    if not message_text.strip():
        message_text = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu."

    bot.send_message(
        chat_id,
        message_text,
        parse_mode="HTML",
        reply_to_message_id=message_id
    )

    if img_xemay:
        bot.send_photo(chat_id, img_xemay, caption="·∫¢nh vi ph·∫°m xe m√°y")
    if img_oto:
        bot.send_photo(chat_id, img_oto, caption="·∫¢nh vi ph·∫°m √¥ t√¥")

#===================================#
@bot.message_handler(commands=['kqxs'])
def handle_kqxs(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    api_url = "https://nguyenmanh.name.vn/api/xsmb?apikey=OUEaxPOl"
    try:
        response = requests.get(api_url, timeout=5)
        data = response.json()
        if data and data.get("status") == 200:
            result = data.get("result", "Kh√¥ng c√≥ d·ªØ li·ªáu.")
            bot.send_message(
                chat_id,
                f"<b>{result}</b>",
                parse_mode="HTML",
                reply_to_message_id=message_id
            )
            bot.delete_message(chat_id, message_id)
        else:
            bot.send_message(
                chat_id,
                "L·ªói khi l·∫•y k·∫øt qu·∫£ x·ªï s·ªë.",
                reply_to_message_id=message_id
            )
    except Exception as e:
        bot.send_message(
            chat_id,
            "L·ªói khi k·∫øt n·ªëi t·ªõi API ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu.",
            reply_to_message_id=message_id
        )

#===================================#
@bot.message_handler(commands=['2fa'])
def handle_2fa(message):
    chat_id = message.chat.id
    message_id = message.message_id

    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    params = message.text.strip().split()
    if len(params) == 1:
        msg = bot.send_message(
            chat_id,
            "‚ö†Ô∏è <b>D√πng m√£ sau l·ªánh /2fa</b>\nV√≠ d·ª•: <code>/2fa 242RIHRGMWYHZ76GDDEZSP3XKK5TUJSQ</code>",
            reply_to_message_id=message_id,
            parse_mode="HTML"
        )
        threading.Timer(15, lambda: safe_delete(chat_id, msg.message_id)).start()
        return

    ma2fa = params[1].strip().upper()

    try:
        response = requests.get(f"https://2fa.live/tok/{ma2fa}", timeout=5)
        res = response.json()
        code = res.get("token")
        if not code or not code.isdigit() or len(code) != 6:
            code = "Kh√¥ng h·ª£p l·ªá"
            ok = False
        else:
            ok = True
    except Exception:
        code = "Kh√¥ng h·ª£p l·ªá"
        ok = False

    current_date = get_vietnam_time()
    video = "https://offvn.io.vn/bot.gif"

    caption = (
        f"<b>{current_date}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüîë M√£ 2FA l√†:</b> <code>{code}</code>"
        + ("\n\n‚úÖ <i>M√£ h·ª£p l·ªá!</i>" if ok else "\n\n‚ùå <i>M√£ 2FA kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra l·∫°i.</i>")
    )

    bot.send_video(
        chat_id,
        video,
        caption=caption,
        reply_to_message_id=message_id,
        supports_streaming=True,
        parse_mode="HTML"
    )

    threading.Timer(10, lambda: safe_delete(chat_id, message_id)).start()

def safe_delete(chat_id, msg_id):
    try:
        bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

#===================================#
def get_qr_url(bank, stk):
    return f"https://img.vietqr.io/image/{bank}-{stk}-compact.png"
@bot.message_handler(commands=['qrbank'])
def handle_qrbank(message):
    chat_id = message.chat.id
    message_id = message.message_id
    text = message.text

    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.")
        return

    args = text.split()
    if len(args) < 3:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng: /qrbank {STK} {Ng√¢n h√†ng}\nüí¨ V√≠ d·ª•: /qrbank 444888365 MBbank."
        )
        return

    stk = args[1]
    bank = args[2]
    qr_url = get_qr_url(bank, stk)

    # Ki·ªÉm tra xem ·∫£nh QR c√≥ t·ªìn t·∫°i kh√¥ng
    try:
        resp = requests.head(qr_url, timeout=10)
        if resp.status_code != 200:
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o m√£ QR, c√≥ th·ªÉ b·∫°n ƒë√£ nh·∫≠p sai s·ªë t√†i kho·∫£n ho·∫∑c ng√¢n h√†ng."
            )
            return
    except Exception:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra m√£ QR, vui l√≤ng th·ª≠ l·∫°i sau."
        )
        return

    # L·∫•y ng√†y gi·ªù hi·ªán t·∫°i
    current_date = get_vietnam_time()

    # N·ªôi dung ch√∫ th√≠ch g·ª≠i k√®m
    bank_info = f"STK: <code>{stk}</code>\nNg√¢n h√†ng: {bank}\n\n"
    bank_info += f"üìÖ Ng√†y t·∫°o QR: {current_date}"
    caption = f"<b>Th√¥ng tin t√†i kho·∫£n:</b>\n{bank_info}"

    bot.send_photo(
        chat_id=chat_id,
        photo=qr_url,
        caption=caption,
        parse_mode='HTML'
    )

    # X√≥a l·ªánh sau khi th√†nh c√¥ng
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        # N·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c c≈©ng kh√¥ng sao, c√≥ th·ªÉ log l·ªói n·∫øu mu·ªën
        print(f"L·ªói khi x√≥a tin nh·∫Øn: {e}")

#===================================#
@bot.message_handler(commands=['github'])
def handle_github(message):
    chat_id = message.chat.id
    message_id = message.message_id
    text = message.text

    # Ki·ªÉm tra quy·ªÅn nh√≥m
    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.")
        return

    # L·∫•y username
    username = text.replace('/github', '').strip()
    if not username:
        bot.send_message(chat_id, "‚ùå Vui l√≤ng cung c·∫•p t√™n ng∆∞·ªùi d√πng GitHub sau l·ªánh /github.")
        return

    url = f"https://api.github.com/users/{username}"
    headers = {'User-Agent': 'request'}

    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200:
            data = resp.json()

            info = (
                f"üîç <b>Th√¥ng tin GitHub c·ªßa <a href=\"{data.get('html_url', '')}\">{username}</a></b>\n\n"
                f"üë§ <b>T√™n ƒëƒÉng nh·∫≠p:</b> {data.get('login', 'Kh√¥ng c√≥')}\n"
                f"üÜî <b>ID:</b> {data.get('id', 'Kh√¥ng r√µ')}\n"
                f"üìù <b>T√™n ƒë·∫ßy ƒë·ªß:</b> {data.get('name', 'Kh√¥ng c√≥ t√™n')}\n"
                f"üîó <b>URL h·ªì s∆°:</b> <a href=\"{data.get('html_url', '')}\">{data.get('html_url', '')}</a>\n"
                f"üè¢ <b>C√¥ng ty:</b> {data.get('company', 'Kh√¥ng c√≥ th√¥ng tin')}\n"
                f"üìç <b>V·ªã tr√≠:</b> {data.get('location', 'Kh√¥ng c√≥ th√¥ng tin')}\n"
                f"üìß <b>Email:</b> {data.get('email', 'Kh√¥ng c√¥ng khai')}\n"
                f"üíº <b>Hireable:</b> {'C√≥ th·ªÉ thu√™' if data.get('hireable') else 'Kh√¥ng th·ªÉ thu√™ ho·∫∑c kh√¥ng c√¥ng khai'}\n"
                f"üí¨ <b>Bio:</b> {data.get('bio', 'Kh√¥ng c√≥ th√¥ng tin')}\n"
                f"üåê <b>Blog:</b> {data.get('blog', 'Kh√¥ng c√≥ URL blog')}\n"
                f"üê¶ <b>Twitter:</b> {data.get('twitter_username', 'Kh√¥ng c√≥ Twitter')}\n"
                f"üïí <b>Ng√†y t·∫°o t√†i kho·∫£n:</b> {data.get('created_at', 'Kh√¥ng r√µ')}\n"
                f"üïí <b>Ng√†y c·∫≠p nh·∫≠t:</b> {data.get('updated_at', 'Kh√¥ng r√µ')}\n"
                f"üìÇ <b>Repositories c√¥ng khai:</b> {data.get('public_repos', 0)}\n"
                f"üìÇ <b>Gists c√¥ng khai:</b> {data.get('public_gists', 0)}\n"
                f"üîí <b>Repositories ri√™ng t∆∞:</b> {data.get('total_private_repos', 'Kh√¥ng r√µ')}\n"
                f"‚≠ê <b>S·ªë follower:</b> {data.get('followers', 0)} | <b>ƒêang follow:</b> {data.get('following', 0)}\n"
                f"üè∑Ô∏è <b>Lo·∫°i t√†i kho·∫£n:</b> {data.get('type', 'Kh√¥ng r√µ')}\n"
                f"üîó <b>Site admin:</b> {'‚úÖ' if data.get('site_admin') else '‚ùå'}\n"
                f"üîó <b>API endpoint:</b> {data.get('url', '')}\n"
                f"üõ°Ô∏è <b>Avatar ID:</b> {data.get('node_id', '')}\n"
            )

            avatar_url = data.get('avatar_url', None)
            try:
                bot.delete_message(chat_id, message_id)
            except Exception:
                pass

            # ƒê√É S·ª¨A L·∫†I CH·ªà GI·ªÆ THAM S·ªê H·ª¢P L·ªÜ
            if avatar_url:
                sent = bot.send_photo(chat_id, avatar_url, caption=info, parse_mode='HTML')
            else:
                sent = bot.send_message(chat_id, info, parse_mode='HTML', disable_web_page_preview=True)

        elif resp.status_code == 404:
            bot.send_message(chat_id, "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng GitHub n√†y.")
        elif resp.status_code == 403:
            bot.send_message(chat_id, "‚ùå ƒê√£ v∆∞·ª£t gi·ªõi h·∫°n truy v·∫•n API GitHub. Vui l√≤ng th·ª≠ l·∫°i sau.")
        else:
            bot.send_message(chat_id, f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ GitHub (m√£ {resp.status_code}).")
    except requests.exceptions.Timeout:
        bot.send_message(chat_id, "‚ùå Qu√° th·ªùi gian ch·ªù ph·∫£n h·ªìi t·ª´ GitHub.")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin t·ª´ GitHub: {e}")

#===================================#
BANK_LIST = [
    "mbbank", "dongabank", "viettinbank", "vietcombank", "techcombank",
    "bidv", "acb", "sacombank", "vpbank", "agribank",
    "hdbank", "tpbank", "shb", "eximbank", "ocb",
    "seabank", "bacabank", "pvcombank", "scb", "vib",
    "namabank", "abbank", "lpbank", "vietabank", "msb",
    "nvbank", "pgbank", "publicbank", "cimbbank", "uob"
]

def qrlink(so_tai_khoan, ten_ngan_hang, so_tien, noi_dung, download):
    return f"{QRND_API_URL}?acc={so_tai_khoan}&bank={ten_ngan_hang}&amount={so_tien}&des={noi_dung}&template=compact&download={download}"

def download_qr_image(url, noi_dung, chat_id):
    try:
        resp = requests.get(url, timeout=20)
        if resp.status_code == 200:
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
                tmp.write(resp.content)
                tmp_path = tmp.name
            with open(tmp_path, "rb") as qr_img:
                bot.send_photo(chat_id, qr_img, caption=noi_dung)
            os.remove(tmp_path)
        else:
            bot.send_message(chat_id, "‚ùå Kh√¥ng th·ªÉ t·∫£i QR code. Vui l√≤ng ki·ªÉm tra l·∫°i!")
    except Exception:
        bot.send_message(chat_id, "‚ùå Kh√¥ng th·ªÉ t·∫£i QR code. Vui l√≤ng ki·ªÉm tra l·∫°i!")

@bot.message_handler(commands=['qrnd'])
def handle_qrnd(message):
    chat_id = message.chat.id
    message_id = message.message_id
    text = message.text

    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.")
        return

    parts = text.split(' ', 4)
    if len(parts) < 4:
        bot.send_message(chat_id, "C√∫ ph√°p: /qrnd [S·ªë t√†i kho·∫£n] [M√£ ng√¢n h√†ng] [S·ªë ti·ªÅn] [N·ªôi dung]")
        return

    so_tai_khoan = parts[1]
    ma_ngan_hang = parts[2].lower()
    so_tien_str = parts[3]
    noi_dung = parts[4] if len(parts) > 4 else ""

    # Ki·ªÉm tra h·ª£p l·ªá m√£ ng√¢n h√†ng
    if ma_ngan_hang not in BANK_LIST:
        bot.send_message(chat_id, "‚ùå M√£ ng√¢n h√†ng kh√¥ng h·ª£p l·ªá!")
        return

    # Ki·ªÉm tra h·ª£p l·ªá s·ªë ti·ªÅn
    if not so_tien_str.isdigit():
        bot.send_message(chat_id, "‚ùå S·ªë ti·ªÅn ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng (ho·∫∑c 0).")
        return
    so_tien = int(so_tien_str)

    # T·∫°o link QR code
    link = qrlink(so_tai_khoan, ma_ngan_hang, so_tien, noi_dung, 'true')

    # N·ªôi dung g·ª≠i k√®m ·∫£nh
    noi_dung_thong_tin = (
        "üìå TH√îNG TIN QR CODE\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üè¶ Ng√¢n H√†ng: {ma_ngan_hang.upper()}\n"
        f"üí≥ S·ªë TK: {so_tai_khoan}\n"
        f"üíµ S·ªë Ti·ªÅn: {so_tien:,} VNƒê\n"
        f"üìù N·ªôi Dung: {noi_dung}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )

    # G·ª≠i ·∫£nh QR
    download_qr_image(link, noi_dung_thong_tin, chat_id)

#===================================#
@bot.message_handler(commands=['scr'])
def handle_scr(message):
    chat_id = message.chat.id
    message_id = message.message_id
    help_text = """
<b>
üìÇ SOURCE BOT REG FACEBOOK
https://link4m.com/XWlBAW
üìÇ SOURCE BOT SEARCH YOUTUBE
https://link4m.com/0K0xYj
üìÇ SOURCE BOT T·∫¢I NH·∫†C T·ª™ SPOTIFY
https://link4m.com/0cCHE
üìÇ SOURCE BOT QR CODE VƒÇN B·∫¢N ƒê·∫∏P
https://link4m.com/MjNtHCk
üìÇ SOURCE BOT CHECK INFO GITHUB
https://link4m.com/vdTqHXr
üìÇ SOURCE BOT CHECK INFO TIKTOK
https://link4m.com/CayF3
üìÇ SOURCE BOT VOICE CHUY·ªÇN VƒÇN B·∫¢N SANG GI·ªåNG N√ìI
https://link4m.com/ZR8IUSK
üìÇ SOURCE BOT VIDEO SEX üÜï
https://link4m.com/DadlL
üìÇ SOURCE BOT T·∫¢I VIDEO TIKTOK üÜï
https://link4m.com/VJQSxEB
üìÇ SOURCE BOT RANDOM VIDEO TIKTOK üÜï
https://link4m.com/aec3F
üìÇ SOURCE BOT CHECK TH√îNG TIN TELEGRAM üÜï
https://link4m.com/cufRuMeY
SOURCE BOT CHUY·ªÇN NG√îN NG·ªÆ TI·∫æNG VI·ªÜT üáªüá≥
https://link4m.com/VCpb9FL
üìÇ SOURCE BOT XEM TH·ªúI GIAN HO·∫†T ƒê·ªòNG BOT ‚è∞
https://link4m.com/sMIj4iP
SOURCE BOT KI·ªÇM TRA TH√îNG TIN QU·ªêC GIA üåç
https://link4m.com/P5RTXt0S
üìÇ SOURCE BOT GOOGLE D·ªäCH üåê
https://link4m.com/WmYVYx0i
üìÇ SOURCE BOT XEM TH·ªúI TI·∫æT üå¶Ô∏è
https://link4m.com/AS5lW
üìÇ SOURCE BOT XEM K·∫æT QU·∫¢ X·ªî S·ªê
https://link4m.com/eiCAF
üìÇ SOURCE BOT TR·∫¢ L·ªúI GPT-4o AI Bot üß†
https://link4m.com/6SX6T
</b>
"""

    # G·ª≠i n·ªôi dung help_text v√† l∆∞u l·∫°i message_id c·ªßa tin nh·∫Øn bot g·ª≠i ra
    sent_msg = bot.send_message(
        chat_id,
        help_text,
        parse_mode='HTML'
    )

    # X√≥a tin nh·∫Øn g·ªëc c·ªßa ng∆∞·ªùi d√πng
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

    # H√†m x√≥a tin nh·∫Øn sau 10 gi√¢y
    def delete_sent():
        time.sleep(20)
        try:
            bot.delete_message(chat_id, sent_msg.message_id)
        except Exception:
            pass

    # Ch·∫°y x√≥a sau 10 gi√¢y trong thread ri√™ng (kh√¥ng block bot)
    threading.Thread(target=delete_sent).start()

#===================================#
LANG_FLAG_MAP = {
    'vi': ('Vi·ªát Nam', 'üáªüá≥'),
    'en': ('English', 'üá¨üáß'),
    'ru': ('Nga', 'üá∑üá∫'),
    'ja': ('Nh·∫≠t B·∫£n', 'üáØüáµ'),
    'ko': ('H√†n Qu·ªëc', 'üá∞üá∑'),
    'zh': ('Trung Qu·ªëc', 'üá®üá≥'),
    'fr': ('Ph√°p', 'üá´üá∑'),
    'de': ('ƒê·ª©c', 'üá©üá™'),
    'es': ('T√¢y Ban Nha', 'üá™üá∏'),
    'it': ('√ù', 'üáÆüáπ'),
    'tr': ('Th·ªï Nhƒ© K·ª≥', 'üáπüá∑'),
    'th': ('Th√°i Lan', 'üáπüá≠'),
    'id': ('Indonesia', 'üáÆüá©'),
    # Th√™m n·∫øu mu·ªën...
}

@bot.message_handler(commands=['thongtin'])
def handle_check(message):
    chat_id = message.chat.id
    message_id = message.message_id

    if not is_allowed_group(chat_id):
        send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.", message_id)
        return

    user = message.reply_to_message.from_user if message.reply_to_message else message.from_user

    user_info = {
        'ID': user.id,
        'T√™n': f"{user.first_name or ''} {user.last_name or ''}".strip(),
        'Username': f"@{user.username}" if user.username else "Kh√¥ng c√≥",
    }

    lang_code = getattr(user, 'language_code', 'Kh√¥ng x√°c ƒë·ªãnh')
    country, flag = LANG_FLAG_MAP.get(lang_code, ('Kh√¥ng x√°c ƒë·ªãnh', 'üè≥Ô∏è'))
    user_info['Ng√¥n ng·ªØ'] = f"{country} {flag} <i>({lang_code})</i>"

    try:
        bio = bot.get_chat(user.id).bio or "Kh√¥ng c√≥"
    except Exception:
        bio = "Kh√¥ng c√≥"

    try:
        member = bot.get_chat_member(chat_id, user.id)
        status = member.status
    except Exception:
        status = "Kh√¥ng x√°c ƒë·ªãnh"

    status_dict = {
        "creator": "Qu·∫£n tr·ªã vi√™n (Admin ch√≠nh)",
        "administrator": "Qu·∫£n tr·ªã vi√™n",
        "member": "Th√†nh vi√™n",
        "restricted": "B·ªã h·∫°n ch·∫ø",
        "left": "R·ªùi nh√≥m",
        "kicked": "B·ªã ƒëu·ªïi"
    }

    user_info['Quy·ªÅn trong nh√≥m'] = status_dict.get(status, "Kh√¥ng x√°c ƒë·ªãnh")
    user_info['Tr·∫°ng th√°i'] = status_dict.get(status, "Kh√¥ng x√°c ƒë·ªãnh")
    user_info['Bio'] = bio
    user_info['Premium'] = "‚≠ê <b>T√†i kho·∫£n Premium</b>" if getattr(user, 'is_premium', False) else "Kh√¥ng"

    user_photos = bot.get_user_profile_photos(user.id)
    avatar_count = user_photos.total_count
    has_avatar = avatar_count > 0
    avatar_text = "ƒê√£ c√≥ avatar" if has_avatar else "Ch∆∞a c√≥ avatar"
    user_info['S·ªë ƒë·∫°i di·ªán'] = str(avatar_count)

    profile_url = f"https://t.me/{user.username}" if user.username else f"https://t.me/user?id={user.id}"

    caption = (
        f"üåü <b>Th√¥ng Tin {'C·ªßa B·∫°n' if user.id == message.from_user.id else 'Ng∆∞·ªùi D√πng'}</b>\n"
        "<blockquote>"
        f"‚îå <b>ID:</b> <code>{user_info['ID']}</code>\n"
        f"‚îú <b>T√™n:</b> {user_info['T√™n']}\n"
        f"‚îú <b>Username:</b> {user_info['Username']}\n"
        f"‚îú <b>Link profile:</b> <a href=\"{profile_url}\">{profile_url}</a>\n"
        f"‚îú <b>Ng√¥n ng·ªØ:</b> {user_info['Ng√¥n ng·ªØ']}\n"
        f"‚îú <b>Quy·ªÅn trong nh√≥m:</b> {user_info['Quy·ªÅn trong nh√≥m']}\n"
        f"‚îú <b>Bio:</b> {user_info['Bio']}\n"
        f"‚îú <b>Premium:</b> {user_info['Premium']}\n"
        f"‚îú <b>S·ªë ƒë·∫°i di·ªán:</b> {user_info['S·ªë ƒë·∫°i di·ªán']}\n"
        f"‚îî <b>Avatar:</b> {avatar_text}\n"
        "</blockquote>"
    )

    if has_avatar:
        avatar_file_id = user_photos.photos[0][-1].file_id
        bot.send_photo(chat_id, avatar_file_id, caption=caption, parse_mode='HTML', reply_to_message_id=message_id)
    else:
        bot.send_message(chat_id, caption, parse_mode='HTML', reply_to_message_id=message_id)

    # X√ìA L·ªÜNH G·ªêC SAU KHI TH·ª∞C HI·ªÜN
    try:
        bot.delete_message(chat_id, message_id)
    except:
        pass  # Tr√°nh l·ªói n·∫øu bot kh√¥ng c√≥ quy·ªÅn x√≥a
#===================================#
keyboard1 = InlineKeyboardMarkup(row_width=2)
keyboard1.add(
    InlineKeyboardButton(text="üë§Admin", url='https://t.me/off_vn'),
    InlineKeyboardButton(text="ü§ñBot", url='https://t.me/tiktokqb_bot')
)

@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    if message.chat.type in ['group', 'supergroup']:
        # L·∫•y s·ªë l∆∞·ª£ng th√†nh vi√™n hi·ªán t·∫°i
        try:
            member_count = bot.get_chat_members_count(message.chat.id)
        except:
            member_count = 'kh√¥ng x√°c ƒë·ªãnh'

        for member in message.new_chat_members:
            chat_id = message.chat.id
            chat_title = message.chat.title
            id = member.id
            first_name = member.first_name or ''
            last_name = member.last_name or ''
            full_name = f"{first_name} {last_name}".strip()
            try:
                text = (
                    f'Xin ch√†o üëã <a href="tg://user?id={id}">{full_name}</a>!\n'
                    f'<blockquote>Ch√†o m·ª´ng b·∫°n ƒë√£ tham gia nh√≥m {chat_title}\n'
                    f'S·ªë th√†nh vi√™n hi·ªán t·∫°i: <b>{member_count}</b>.\n'
                    f'S·ª≠ d·ª•ng l·ªánh /start ƒë·ªÉ xem chi ti·∫øt.</blockquote>'
                )
                bot.send_video(
                    chat_id, 
                    'https://offvn.io.vn/welcome.mp4', 
                    caption=text, 
                    parse_mode='HTML', 
                    reply_markup=keyboard1
                )
            except Exception as e:
                print(f"L·ªói g·ª≠i tin nh·∫Øn ch√†o m·ª´ng: {e}")

#===================================#
def country_flag(locale):
    if locale and "_" in locale:
        country_code = locale.split('_')[1]
        return ''.join([chr(127397 + ord(c.upper())) for c in country_code])
    return ''

def relationship_status_text(status):
    mapping = {
        "Single": "üíî ƒê·ªôc th√¢n",
        "In a relationship": "üíë ƒêang h·∫πn h√≤",
        "Engaged": "üíç ƒê√£ ƒë√≠nh h√¥n",
        "Married": "üíí ƒê√£ k·∫øt h√¥n",
        "It's complicated": "ü§î Ph·ª©c t·∫°p",
        "Separated": "üíî ƒê√£ ly th√¢n",
        "Divorced": "üíî ƒê√£ ly h√¥n",
        "Widowed": "üñ§ ƒê√£ g√≥a",
        "In an open relationship": "üîó M·ªëi quan h·ªá m·ªü",
        "In a civil union": "üë¨ Li√™n minh d√¢n s·ª±",
        "In a domestic partnership": "üè† ƒê·ªëi t√°c chung s·ªëng",
        "Kh√¥ng c√¥ng khai": "‚ùì Kh√¥ng c√¥ng khai",
        "Ch∆∞a thi·∫øt l·∫≠p": "‚ùì Kh√¥ng c√¥ng khai",
        "": "‚ùì Kh√¥ng c√¥ng khai"
    }
    return mapping.get(status, status if status else "‚ùì Kh√¥ng c√¥ng khai")


@bot.message_handler(commands=['fb'])
def send_facebook_info(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(
            chat_id,
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.",
            reply_to_message_id=message_id
        )
        return

    waiting = bot.reply_to(message, "üîç")
    user_input = message.text.split(maxsplit=1)
    if len(user_input) < 2:
        bot.send_message(chat_id, "‚ùå Vui l√≤ng nh·∫≠p UID ho·∫∑c Link sau l·ªánh /fb\n\nüí¨ V√≠ D·ª•: <code>/fb 61574395204757</code> ho·∫∑c <code>/fb https://facebook.com/zuck</code>")
        bot.delete_message(chat_id, waiting.message_id)
        return

    fb_input = user_input[1].strip()

    # Ki·ªÉm tra xem input l√† UID (to√†n s·ªë) hay link
    if fb_input.isdigit():
        fb_id = fb_input
    else:
        # Nh·∫≠n link Facebook, convert sang UID
        # X·ª≠ l√Ω link cho an to√†n
        fb_link = fb_input
        # X·ª≠ l√Ω link c√≥ th·ªÉ thi·∫øu http
        if not fb_link.startswith("http"):
            fb_link = "https://" + fb_link

        convert_api = f"https://offvn.x10.mx/php/convertID.php?url={fb_link}"
        try:
            convert_res = requests.get(convert_api)
            if convert_res.status_code == 200:
                convert_data = convert_res.json()
                fb_id = str(convert_data.get("id", ""))
                if not fb_id.isdigit():
                    bot.send_message(chat_id, "‚ùå Kh√¥ng th·ªÉ l·∫•y UID t·ª´ link Facebook n√†y! Vui l√≤ng ki·ªÉm tra l·∫°i.")
                    bot.delete_message(chat_id, waiting.message_id)
                    return
            else:
                bot.send_message(chat_id, "‚ùå L·ªói khi k·∫øt n·ªëi API l·∫•y UID.")
                bot.delete_message(chat_id, waiting.message_id)
                return
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå L·ªói khi l·∫•y UID t·ª´ link: {e}")
            bot.delete_message(chat_id, waiting.message_id)
            return

    # T·ªõi ƒë√¢y fb_id ch·∫Øc ch·∫Øn l√† UID
    api_url = f"https://offvn.x10.mx/php/apiCheck.php?id={fb_id}"
    response = requests.get(api_url)

    if response.status_code == 200:
        try:
            data = response.json().get("result", {})

            if not isinstance(data, dict):
                bot.send_message(chat_id, "‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i, C√≥ Th·ªÉ B·∫°n ƒê√£ Nh·∫≠p Sai ƒê·ªãnh D·∫°ng")
                return

            # ... (Ph·∫ßn x·ª≠ l√Ω data b√™n d∆∞·ªõi gi·ªØ nguy√™n nh∆∞ b·∫°n ƒë√£ l√†m) ...
            # Copy nguy√™n ph·∫ßn x·ª≠ l√Ω data c·ªßa b·∫°n ·ªü tr√™n (t·ª´: name = data.get("name", ...) cho ƒë·∫øn cu·ªëi)
            # Ch·ªâ s·ª≠a l·∫°i bi·∫øn message.chat.id => chat_id cho ƒë·ªìng b·ªô

            # -- CODE X·ª¨ L√ù DATA ·ªû ƒê√ÇY (NH∆Ø C·ª¶A B·∫†N) --
            name = data.get("name", "Kh√¥ng c√¥ng khai")
            username = data.get("username", "Ch∆∞a thi·∫øt l·∫≠p")
            profile_id = data.get("id", "Ch∆∞a thi·∫øt l·∫≠p")
            link = data.get("link", "https://www.facebook.com/")
            is_verified = data.get("is_verified", False)
            picture = data.get("picture", {}).get("data", {}).get("url", "")
            created_time = data.get("created_time", "Kh√¥ng c√¥ng khai")
            about = data.get("about", "Kh√¥ng c√¥ng khai")
            locale = data.get("locale", "Kh√¥ng c√¥ng khai")
            gender = data.get("gender", "Kh√¥ng c√¥ng khai").capitalize()
            hometown = data.get("hometown", {}).get("name", "Kh√¥ng c√¥ng khai")
            location = data.get("location", {}).get("name", "Kh√¥ng c√¥ng khai")
            updated_time = data.get("updated_time", "Kh√¥ng c√¥ng khai")
            timezone = data.get("timezone", "Kh√¥ng c√¥ng khai")
            work = data.get("work", [])
            cover_photo = data.get("cover", {}).get("source", "")
            followers = data.get("followers", "Kh√¥ng c√¥ng khai")
            following = data.get("following", "Kh√¥ng r√µ s·ªë l∆∞·ª£ng ƒëang theo d√µi")
            relationship = data.get("relationship_status","Kh√¥ng c√¥ng khai")
            significant_other = data.get("significant_other", {})
            significant_other_name = significant_other.get("name", "Kh√¥ng c√¥ng khai")
            significant_other_id = significant_other.get("id", "Kh√¥ng c√¥ng khai")

            flag = country_flag(locale)

            work_info = ""
            if work:
                for job in work:
                    position = job.get("position", {}).get("name", "")
                    employer = job.get("employer", {}).get("name", "")
                    work_info += f"\n‚îÇ -> L√†m vi·ªác t·∫°i {position} <a href='https://facebook.com/{username}'>{employer}</a>"
            else:
                work_info = "Kh√¥ng c√¥ng khai"

            education_info = ""
            education = data.get("education", [])
            if education:
                for edu in education:
                    school = edu.get("school", {}).get("name", "Kh√¥ng c√¥ng khai")
                    education_info += f"\n‚îÇ -> H·ªçc {edu.get('concentration', [{'name': ''}])[0]['name']} t·∫°i <a href='https://facebook.com/{username}'>{school}</a>"
            else:
                education_info = "Kh√¥ng c√¥ng khai"

            verification_status = "ƒê√£ X√°c Minh ‚úÖ" if is_verified else "Ch∆∞a x√°c minh ‚ùå"
            picture_status = "C√≥ ·∫£nh ƒë·∫°i di·ªán üë§" if not data.get("picture", {}).get("data", {}).get("is_silhouette", True) else "Kh√¥ng c√≥ ·∫£nh ƒë·∫°i di·ªán ‚ùå"

            relationship_icon_text = relationship_status_text(relationship)

            significant_other_line = ""
            if significant_other_id not in ["Kh√¥ng c√¥ng khai", "Ch∆∞a thi·∫øt l·∫≠p", None, ""]:
                significant_other_line = (
                    f"‚îÇ -> üíç ƒê√£ k·∫øt h√¥n v·ªõi: <a href='https://facebook.com/{significant_other_id}'>{significant_other_name}</a>\n"
                    f"‚îÇ -> üîó Link UID: <code>https://facebook.com/{significant_other_id}</code>"
                )

            if cover_photo:
                cover_photo_line = f"‚îÇ ùóñùóºùòÉùó≤ùóø ùó£ùóµùóºùòÅùóº: <a href='{cover_photo}'>üñºÔ∏è Xem ·∫£nh b√¨a</a>"
            else:
                cover_photo_line = "‚îÇ ùóñùóºùòÉùó≤ùóø ùó£ùóµùóºùòÅùóº: Kh√¥ng c√≥ ·∫£nh b√¨a ‚ùå"

            fb_info = f"""
<blockquote>‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
‚îÇ ùó°ùóÆùó∫ùó≤: <a href='{picture}'>{name}</a>
‚îÇ ùó®ùóúùóó: <a href='https://facebook.com/{profile_id}'>{profile_id}</a>
‚îÇ ùó®ùòÄùó≤ùóø ùó°ùóÆùó∫ùó≤: <a href='https://facebook.com/{username}'>{username}</a>
{cover_photo_line}
‚îÇ -> {picture_status}
‚îÇ ùóüùó∂ùóªùó∏: {link}
‚îÇ ùóïùó∂ùóøùòÅùóµùó±ùóÆùòÜ: {data.get("birthday", "Kh√¥ng hi·ªÉn th·ªã ng√†y sinh")}
‚îÇ ùóôùóºùóπùóπùóºùòÑùó≤ùóøùòÄ: <a href='https://facebook.com/{profile_id}'>{followers}</a> Ng∆∞·ªùi theo d√µi
‚îÇ ùóôùóºùóπùóπùóºùòÑùó∂ùóªùó¥: {following}
‚îÇ ùóóùóÆùòÅùó≤ ùóñùóøùó≤ùóÆùòÅùó≤ùó±: {created_time}
‚îÇ ùó©ùó≤ùóøùó∂ùó≥ùó∂ùó∞ùóÆùòÅùó∂ùóºùóª: {verification_status}
‚îÇ ùó¶ùòÅùóÆùòÅùòÇùòÄ: {relationship_icon_text}
{significant_other_line}
‚îÇ ùóïùó∂ùóº: {about}
‚îÇ ùóöùó≤ùóªùó±ùó≤ùóø: {gender}
‚îÇ ùóõùóºùó∫ùó≤ùòÅùóºùòÑùóª: {hometown}
‚îÇ ùóüùóºùó∞ùóÆùòÅùó∂ùóºùóª: {location}
‚îÇ ùó™ùóºùóøùó∏: {work_info}
‚îÇ ùóòùó±ùòÇùó∞ùóÆùòÅùó∂ùóºùóª: {education_info}
‚îÇ ùóîùóØùóºùòÇùòÅùòÄ: {data.get("quotes", "Kh√¥ng c√≥ tr√≠ch d·∫´n")}
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠î
‚îÇ ùóüùóÆùóªùó¥ùòÇùóÆùó¥ùó≤: {locale} {flag}
‚îÇ ùóßùó∂ùó∫ùó≤ ùó®ùóΩùó±ùóÆùòÅùó≤: {updated_time}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
</blockquote>
            """
            bot.send_message(chat_id, fb_info, parse_mode='HTML')
            bot.delete_message(chat_id, waiting.message_id)
        except Exception as e:
            bot.send_message(chat_id, f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
            bot.delete_message(chat_id, waiting.message_id)
    else:
        bot.send_message(chat_id, "‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i, C√≥ Th·ªÉ B·∫°n ƒê√£ Nh·∫≠p Sai ƒê·ªãnh D·∫°ng")
        bot.delete_message(chat_id, waiting.message_id)
    # X√ìA TIN NH·∫ÆN CH·ª®A L·ªÜNH SAU KHI BOT TR·∫¢ L·ªúI
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"L·ªói x√≥a l·ªánh: {e}")

#===================================#
def get_tiktok_info(username):
    url = f"https://offvn.x10.mx/php/tt.php?input={username}&key=offvnx"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if not data.get("success") or "userInfo" not in data["data"]:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin TikTok.", None

        user_info = data['data']['userInfo']['user']
        stats = data['data']['userInfo']['stats']

        # L·∫•y th√™m c√°c tr∆∞·ªùng th√¥ng tin m·ªõi
        short_id = user_info.get('shortId', 'Kh√¥ng c√≥')
        open_favorite = "C√¥ng khai" if user_info.get('openFavorite') else "Ri√™ng t∆∞"
        comment_setting = user_info.get('commentSetting', 0)
        duet_setting = user_info.get('duetSetting', 0)
        stitch_setting = user_info.get('stitchSetting', 0)
        download_setting = user_info.get('downloadSetting', 0)
        is_ad_virtual = "C√≥" if user_info.get('isADVirtual') else "Kh√¥ng"
        tt_seller = "C√≥" if user_info.get('ttSeller') else "Kh√¥ng"
        is_organization = "T·ªï ch·ª©c" if user_info.get('isOrganization') else "C√° nh√¢n"
        profile_embed_permission = "Cho ph√©p" if user_info.get('profileEmbedPermission') else "Kh√¥ng cho ph√©p"
        can_exp_playlist = "C√≥" if user_info.get('canExpPlaylist') else "Kh√¥ng"

        # Gi·∫£i th√≠ch quy·ªÅn ri√™ng t∆∞
        def explain_privacy(val):
            return {
                0: "M·ªçi ng∆∞·ªùi",
                1: "B·∫°n b√®",
                2: "Ch·ªâ m√¨nh t√¥i",
                3: "C·∫•m t·∫£i"
            }.get(val, str(val))

        avatar_url = user_info.get("avatarLarger") or user_info.get("avatarMedium") or user_info.get("avatarThumb")
        create_time = user_info.get('createTime', 'Kh√¥ng r√µ')
        nick_update_time = user_info.get('nickNameModifyTime', 'Kh√¥ng r√µ')
        region_flag = user_info.get('region_flag', user_info.get('region', 'Kh√¥ng r√µ'))
        language = user_info.get('language', 'Kh√¥ng r√µ')

        music_tab = "C√≥" if user_info.get('profileTab', {}).get('showMusicTab') else "Kh√¥ng"
        question_tab = "C√≥" if user_info.get('profileTab', {}).get('showQuestionTab') else "Kh√¥ng"
        has_playlist = "C√≥" if user_info.get('profileTab', {}).get('showPlayListTab') else "Kh√¥ng"
        commerce_type = "Th∆∞∆°ng m·∫°i/Shop üõí" if user_info.get("commerceUserInfo", {}).get("commerceUser") else "C√° nh√¢n"
        is_verified = "ƒê√£ x√°c minh ‚úÖ" if user_info.get('verified') else "Ch∆∞a x√°c minh ‚ùå"
        account_status = "C√¥ng Khai" if not user_info.get('privateAccount') else "Ri√™ng T∆∞"
        following_visibility = (
            "Danh s√°ch following ƒë√£ b·ªã ·∫©n" if user_info.get('followingVisibility') == 2 else "Danh s√°ch following hi·ªÉn th·ªã"
        )

        result = f"""
<blockquote>‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
‚îÇ ‚Äéùó°ùóÆùó∫ùó≤: {user_info.get('nickname', 'Kh√¥ng r√µ')}
‚îÇ ùóúùóó: {user_info.get('id', 'Kh√¥ng r√µ')} (ShortID: {short_id})
‚îÇ ùó®ùòÄùó≤ùóøùóªùóÆùó∫ùó≤: {user_info.get('uniqueId', 'Kh√¥ng r√µ')}
‚îÇ ùóüùó∂ùóªùó∏: <a href="https://www.tiktok.com/@{user_info.get('uniqueId', '')}">https://www.tiktok.com/@{user_info.get('uniqueId', '')}</a>
‚îÇ ùóüùó∂ùó∏ùó≤ ùó£ùòÇùóØùóπùó∂ùó∞: {open_favorite}
‚îÇ ùó©ùó≤ùóøùó∂ùó≥ùó∂ùó≤ùó±: {is_verified}
‚îÇ ùó¶ùòÅùóÆùòÅùòÇùòÄ:
‚îÇ | -> <i>Tab nh·∫°c: {music_tab}</i>
‚îÇ | -> <i>Tab h·ªèi ƒë√°p: {question_tab}</i>
‚îÇ | -> <i>Danh s√°ch ph√°t: {has_playlist}</i>
‚îÇ | -> <i>Lo·∫°i t√†i kho·∫£n: {commerce_type}</i>
‚îÇ | -> <i>T√†i kho·∫£n n√†y ƒëang ·ªü ch·∫ø ƒë·ªô {account_status}</i>
‚îÇ | -> <i>{following_visibility}</i>
‚îÇ | -> <i>L√† t·ªï ch·ª©c: {is_organization}</i>
‚îÇ | -> <i>Cho ph√©p nh√∫ng profile: {profile_embed_permission}</i>
‚îÇ | -> <i>C√≥ th·ªÉ t·∫°o playlist: {can_exp_playlist}</i>
‚îÇ | -> <i>L√† t√†i kho·∫£n qu·∫£ng c√°o/·∫£o: {is_ad_virtual}</i>
‚îÇ | -> <i>Shop TikTok Seller: {tt_seller}</i>
‚îÇ ùó£ùóøùó∂ùòÉùóÆùó∞ùòÜ:
‚îÇ | -> B√¨nh lu·∫≠n: {explain_privacy(comment_setting)}
‚îÇ | -> Duet: {explain_privacy(duet_setting)}
‚îÇ | -> Stitch: {explain_privacy(stitch_setting)}
‚îÇ | -> T·∫£i video: {explain_privacy(download_setting)}
‚îÇ ùóïùó∂ùóº: {user_info.get('signature', '')}
‚îÇ ùóôùóºùóπùóπùóºùòÑùó≤ùóøùòÄ: {stats.get('followerCount', 0):,} Follower
‚îÇ ùóôùóºùóπùóπùóºùòÑùó∂ùóªùó¥: {stats.get('followingCount', 0)} ƒêang Follow
‚îÇ ùóôùóøùó∂ùó≤ùóªùó±ùòÄ: {stats.get('friendCount', 0)} B·∫°n B√®
‚îÇ ùóüùó∂ùó∏ùó≤ùòÄ: {stats.get('heartCount', 0):,} Th√≠ch
‚îÇ ùó©ùó∂ùó±ùó≤ùóºùòÄ: {stats.get('videoCount', 0)} Video
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠î
‚îÇ ùóñùóøùó≤ùóÆùòÅùó≤ùó± ùóßùó∂ùó∫ùó≤: {create_time}
‚îÇ ùó°ùóÆùó∫ùó≤ ùó®ùóΩùó±ùóÆùòÅùó≤: {nick_update_time}
‚îÇ ùó•ùó≤ùó¥ùó∂ùóºùóª: {region_flag}
‚îÇ ùóüùóÆùóªùó¥ùòÇùóÆùó¥ùó≤: {language}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
</blockquote>
        """
        return result, avatar_url
    except requests.RequestException as e:
        return f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API. L·ªói: {e}", None

@bot.message_handler(commands=['tt'])
def handle_tiktok_info(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.", reply_to_message_id=message_id)
        return
    try:
        # L·∫•y username sau l·ªánh /tt
        parts = message.text.split(' ', 1)
        if len(parts) < 2 or not parts[1].strip():
            bot.reply_to(
                message,
                "‚ö†Ô∏è Vui l√≤ng nh·∫≠p username ho·∫∑c link TikTok sau l·ªánh /tt\nüí¨ V√≠ d·ª•: <code>/tt fanduonghoang</code>",
                parse_mode='HTML')
            return
        username = parts[1].strip()
        result, avatar_url = get_tiktok_info(username)
        if avatar_url:
            bot.send_photo(message.chat.id, avatar_url, caption=result, parse_mode='HTML')
        else:
            bot.reply_to(message, result, parse_mode='HTML')
        # X√≥a l·ªánh c·ªßa ng∆∞·ªùi d√πng sau khi g·ª≠i k·∫øt qu·∫£ th√†nh c√¥ng
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            print(f"L·ªói x√≥a tin nh·∫Øn: {e}")
    except Exception as e:
        bot.reply_to(message, f"ƒê√£ x·∫£y ra l·ªói: {e}")

#===================================#
@bot.message_handler(commands=['tiktok'])
def handle_tiktok(message):
    chat_id = message.chat.id
    message_id = message.message_id
    if not is_allowed_group(chat_id):
        bot.send_message(chat_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Vui l√≤ng truy c·∫≠p nh√≥m @nhomspamcallsms ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh.", reply_to_message_id=message_id)
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p <strong>link video Tiktok</strong> sau /tiktok.\n\nüí≠ V√≠ d·ª•: <code>/tiktok https://vt.tiktok.com/ZNdNkdBQY/</code>")
        return

    url = args[1].strip()
    api_url = f'https://offvn.x10.mx/php/video.php?url={requests.utils.quote(url)}'
    try:
        res = requests.get(api_url)
        data = res.json()
    except Exception as e:
        bot.reply_to(message, "‚ùå L·ªói khi truy c·∫≠p API.")
        return

    if data.get('msg') != 'success' or 'data' not in data:
        bot.reply_to(message, "‚ùå Kh√¥ng th·ªÉ t·∫£i <strong>video</strong> t·ª´ <strong>URL</strong> ƒë∆∞·ª£c cung c·∫•p.")
        return

    d = data['data']
    video_url = d.get('play')
    music_url = d.get('music')

    do_dai_video = f"üéÆ ƒê·ªô D√†i Video: {d.get('duration')} gi√¢y" if d.get('duration') else f"üé∂ ƒê·ªô D√†i Nh·∫°c: {d['music_info']['duration']} gi√¢y"
    dung_luong = f"üóÇÔ∏è Dung L∆∞·ª£ng: {d.get('size')} MB\n" if d.get('size') else ""
    la_ad = "üì¢ L√† Video Qu·∫£ng C√°o\n" if d.get('is_ad') else ""

    caption = (
        f"üé• <strong>{d.get('title')}</strong>\n\n"
        f"<blockquote><i>"
        f"üë§ T√°c gi·∫£: <a href='https://www.tiktok.com/@{d['author']['unique_id']}'>{d['author']['nickname']}</a>\n"
        f"üåç Khu V·ª±c: {d.get('region')}\n"
        f"{do_dai_video}\n"
        f"{dung_luong}"
        f"üóìÔ∏è Ng√†y ƒêƒÉng: {d.get('create_time')}\n"
        f"{la_ad}"
        f"---------------------------------------\n"
        f"‚ñ∂Ô∏è Views: {d.get('play_count')}\n"
        f"‚ù§Ô∏è Likes: {d.get('digg_count')}\n"
        f"üí¨ Comments: {d.get('comment_count')}\n"
        f"üîÑ Shares: {d.get('share_count')}\n"
        f"‚¨áÔ∏è Downloads: {d.get('download_count')}\n"
        f"üì• Favorites: {d.get('collect_count')}"
        f"</i></blockquote>"
    )

    kb = InlineKeyboardMarkup()
    if d.get('size', 0) > 20:
        kb.add(
            InlineKeyboardButton("üé• Link Download Video", url=f"https://api.zm.io.vn/download/?url={video_url}&extension=mp4&name=downvideott_bot&quality=watermark")
        )
        kb.add(
            InlineKeyboardButton("üéµ Link Download Nh·∫°c", url=f"https://api.zm.io.vn/download/?url={music_url}&extension=mp3&name=downvideott_bot&quality=audio")
        )
        bot.reply_to(message, f"{caption}\n‚ö†Ô∏è Video qu√° l·ªõn ƒë·ªÉ g·ª≠i tr·ª±c ti·∫øp. B·∫°n c√≥ th·ªÉ t·∫£i video t·ª´ li√™n k·∫øt d∆∞·ªõi ƒë√¢y:", reply_markup=kb)
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception as e:
            print(f"L·ªói x√≥a tin nh·∫Øn: {e}")
    else:
        if video_url and 'mp4' in video_url:
            bot.send_chat_action(chat_id, 'upload_video')
            bot.send_video(chat_id, video_url, caption=caption, reply_markup=kb)
            try:
                bot.delete_message(chat_id, message.message_id)
            except Exception as e:
                print(f"L·ªói x√≥a tin nh·∫Øn: {e}")
        elif 'images' in d and d['images']:
            images = d['images']
            bot.send_chat_action(chat_id, 'upload_photo')
            try:
                # Chia ·∫£nh th√†nh nhi·ªÅu album nh·ªè, m·ªói album t·ªëi ƒëa 10 ·∫£nh
                for i in range(0, len(images), 10):
                    batch = images[i:i+10]
                    media = []
                    for idx, img in enumerate(batch):
                        if idx == 0:
                            media.append(InputMediaPhoto(media=img, caption=caption))
                        else:
                            media.append(InputMediaPhoto(media=img))
                    if len(batch) > 1:
                        bot.send_media_group(chat_id, media)
                    else:
                        bot.send_photo(chat_id, batch[0], caption=caption)
                try:
                    bot.delete_message(chat_id, message.message_id)
                except Exception as e:
                    print(f"L·ªói x√≥a tin nh·∫Øn: {e}")
            except Exception as e:
                print(f"L·ªói g·ª≠i media group: {e}")
                # N·∫øu l·ªói, g·ª≠i t·ª´ng ·∫£nh
                for img in images:
                    bot.send_photo(chat_id, img)
                try:
                    bot.delete_message(chat_id, message.message_id)
                except Exception as e:
                    print(f"L·ªói x√≥a tin nh·∫Øn: {e}")
            # G·ª≠i audio t·ª´ b·ªô nh·ªõ
            send_audio(bot, chat_id, music_url, d['music_info']['title'], d['music_info']['author'], d['music_info']['cover'], caption)
        else:
            bot.reply_to(message, "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y <strong>·∫£nh</strong> ƒë·ªÉ g·ª≠i ho·∫∑c link kh√¥ng ·ªü <strong>ch·∫ø ƒë·ªô c√¥ng khai</strong>.")
            try:
                bot.delete_message(chat_id, message.message_id)
            except Exception as e:
                print(f"L·ªói x√≥a tin nh·∫Øn: {e}")

def send_audio(bot, chat_id, audio_url, title, performer, thumb_url, caption):
    try:
        audio_data = requests.get(audio_url).content
        thumb_data = requests.get(thumb_url).content

        audio_file = BytesIO(audio_data)
        audio_file.name = "audio.mp3"
        thumb_file = BytesIO(thumb_data)
        thumb_file.name = "thumb.jpg"

        bot.send_audio(
            chat_id,
            audio_file,
            title=title,
            performer=performer,
            caption=caption,
            thumb=thumb_file
        )
    except Exception as e:
        print(f"L·ªói g·ª≠i audio: {e}")

bot.infinity_polling()